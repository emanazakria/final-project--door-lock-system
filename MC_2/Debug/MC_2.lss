
MC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001cfa  00001d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007a  0080007a  00001da8  2**0
                  ALLOC
  3 .stab         00001da0  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124e  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000094e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_3>
      10:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__vector_8>
      24:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 0a 	call	0x151a	; 0x151a <main>
      8a:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
/*in this function , we want to
 * set the parity
 * chosse stop bits
 * choose number of bits (size of data sent)
 * set the required baudrate */
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	29 97       	sbiw	r28, 0x09	; 9
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9f 83       	std	Y+7, r25	; 0x07
     b5c:	8e 83       	std	Y+6, r24	; 0x06
	uint32 baudrate;
	uint8 BAUD_PRESCALE; //to put in it the baud_prescale according to the equation

	UCSRA = (1<<U2X);// for double transmission speed
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b66:	ea e2       	ldi	r30, 0x2A	; 42
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	88 e1       	ldi	r24, 0x18	; 24
     b6c:	80 83       	st	Z, r24

	if(Config_Ptr->size ==7 )//9bit data
     b6e:	ee 81       	ldd	r30, Y+6	; 0x06
     b70:	ff 81       	ldd	r31, Y+7	; 0x07
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	87 30       	cpi	r24, 0x07	; 7
     b76:	51 f4       	brne	.+20     	; 0xb8c <UART_init+0x46>
	{
		UCSRB |= (1<<UCSZ2); // 9-bits data
     b78:	aa e2       	ldi	r26, 0x2A	; 42
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ea e2       	ldi	r30, 0x2A	; 42
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
		flag_9bits =1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 7a 00 	sts	0x007A, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 e8       	ldi	r24, 0x80	; 128
     b92:	80 83       	st	Z, r24

	switch(Config_Ptr->parity)// to choose the parity (even or odd modes only)
     b94:	ee 81       	ldd	r30, Y+6	; 0x06
     b96:	ff 81       	ldd	r31, Y+7	; 0x07
     b98:	80 81       	ld	r24, Z
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	39 87       	std	Y+9, r19	; 0x09
     ba0:	28 87       	std	Y+8, r18	; 0x08
     ba2:	88 85       	ldd	r24, Y+8	; 0x08
     ba4:	99 85       	ldd	r25, Y+9	; 0x09
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	31 f0       	breq	.+12     	; 0xbb8 <UART_init+0x72>
     bac:	28 85       	ldd	r18, Y+8	; 0x08
     bae:	39 85       	ldd	r19, Y+9	; 0x09
     bb0:	23 30       	cpi	r18, 0x03	; 3
     bb2:	31 05       	cpc	r19, r1
     bb4:	49 f0       	breq	.+18     	; 0xbc8 <UART_init+0x82>
     bb6:	0f c0       	rjmp	.+30     	; 0xbd6 <UART_init+0x90>
	{
	case 2:
		UCSRC |= (1<<UPM1); //Even parity
     bb8:	a0 e4       	ldi	r26, 0x40	; 64
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e0 e4       	ldi	r30, 0x40	; 64
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	8c 93       	st	X, r24
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <UART_init+0x90>
		break;
	case 3:
		UCSRC |= (1<<UPM0) | (1<<UPM1); //Odd parity
     bc8:	a0 e4       	ldi	r26, 0x40	; 64
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 63       	ori	r24, 0x30	; 48
     bd4:	8c 93       	st	X, r24
		break;
	}
	switch(Config_Ptr->stop)// to choose number of stop bits
     bd6:	ee 81       	ldd	r30, Y+6	; 0x06
     bd8:	ff 81       	ldd	r31, Y+7	; 0x07
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	39 f4       	brne	.+14     	; 0xbf4 <UART_init+0xae>
	{
	case 1:
		UCSRC |= (1<<USBS); // 2bits to stop
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e0 e4       	ldi	r30, 0x40	; 64
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	8c 93       	st	X, r24
	}

	//put the chosen size in the 2nd,3rd and 4th bits in UCSRC
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->size)<<1);
     bf4:	a0 e4       	ldi	r26, 0x40	; 64
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e4       	ldi	r30, 0x40	; 64
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	28 2f       	mov	r18, r24
     c00:	29 7f       	andi	r18, 0xF9	; 249
     c02:	ee 81       	ldd	r30, Y+6	; 0x06
     c04:	ff 81       	ldd	r31, Y+7	; 0x07
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	82 2b       	or	r24, r18
     c12:	8c 93       	st	X, r24

	//First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	baudrate = Config_Ptr->BaudRate;
     c14:	ee 81       	ldd	r30, Y+6	; 0x06
     c16:	ff 81       	ldd	r31, Y+7	; 0x07
     c18:	83 81       	ldd	r24, Z+3	; 0x03
     c1a:	94 81       	ldd	r25, Z+4	; 0x04
     c1c:	a5 81       	ldd	r26, Z+5	; 0x05
     c1e:	b6 81       	ldd	r27, Z+6	; 0x06
     c20:	8a 83       	std	Y+2, r24	; 0x02
     c22:	9b 83       	std	Y+3, r25	; 0x03
     c24:	ac 83       	std	Y+4, r26	; 0x04
     c26:	bd 83       	std	Y+5, r27	; 0x05
	BAUD_PRESCALE= ((F_CPU / (baudrate * 8UL)) - 1);
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	ac 81       	ldd	r26, Y+4	; 0x04
     c2e:	bd 81       	ldd	r27, Y+5	; 0x05
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	aa 1f       	adc	r26, r26
     c36:	bb 1f       	adc	r27, r27
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	aa 1f       	adc	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	aa 1f       	adc	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	9c 01       	movw	r18, r24
     c4a:	ad 01       	movw	r20, r26
     c4c:	80 e4       	ldi	r24, 0x40	; 64
     c4e:	92 e4       	ldi	r25, 0x42	; 66
     c50:	af e0       	ldi	r26, 0x0F	; 15
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__udivmodsi4>
     c5c:	da 01       	movw	r26, r20
     c5e:	c9 01       	movw	r24, r18
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = BAUD_PRESCALE>>8;
     c64:	e0 e4       	ldi	r30, 0x40	; 64
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	89 2f       	mov	r24, r25
     c70:	99 0f       	add	r25, r25
     c72:	99 0b       	sbc	r25, r25
     c74:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
     c76:	e9 e2       	ldi	r30, 0x29	; 41
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	80 83       	st	Z, r24
}
     c7e:	29 96       	adiw	r28, 0x09	; 9
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <UART_sendByte>:

void UART_sendByte(const uint16 data)
{   uint8 bit_9=0;   // to get the bit number 9 of data
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_sendByte+0x6>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02
     ca0:	19 82       	std	Y+1, r1	; 0x01
/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
 * transmitting a new byte so wait until this flag is set to one */
while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     ca2:	eb e2       	ldi	r30, 0x2B	; 43
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	80 72       	andi	r24, 0x20	; 32
     cae:	90 70       	andi	r25, 0x00	; 0
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	b9 f3       	breq	.-18     	; 0xca2 <UART_sendByte+0x12>
/* Put the required data in the UDR register and it also clear the UDRE flag as
 * the UDR register is not empty now */
if(flag_9bits==1)
     cb4:	80 91 7a 00 	lds	r24, 0x007A
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	59 f4       	brne	.+22     	; 0xcd2 <UART_sendByte+0x42>
{
	bit_9= data & (1<<8);  // to get the bit number 9 of data
     cbc:	19 82       	std	Y+1, r1	; 0x01
	UCSRB = (UCSRB & 0xFE) | bit_9; //Put this bit in TXB8
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	98 2f       	mov	r25, r24
     cca:	9e 7f       	andi	r25, 0xFE	; 254
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	89 2b       	or	r24, r25
     cd0:	8c 93       	st	X, r24
}
UDR = data;
     cd2:	ec e2       	ldi	r30, 0x2C	; 44
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	80 83       	st	Z, r24
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <UART_recieveByte>:

uint16 UART_recieveByte(void)
{     uint8 bit_9=0;   // to get the bit number 9 of data
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	0f 92       	push	r0
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	19 82       	std	Y+1, r1	; 0x01
/* RXC flag is set when the UART receive data so wait until this
 * flag is set to one */
while(BIT_IS_CLEAR(UCSRA,RXC)){}
     cf2:	eb e2       	ldi	r30, 0x2B	; 43
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 23       	and	r24, r24
     cfa:	dc f7       	brge	.-10     	; 0xcf2 <UART_recieveByte+0xc>
/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
bit_9 = (UCSRB & 1); //Read the bit number 9
     cfc:	ea e2       	ldi	r30, 0x2A	; 42
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
return (UDR | (bit_9<<8));
     d06:	ec e2       	ldi	r30, 0x2C	; 44
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	98 2f       	mov	r25, r24
     d18:	88 27       	eor	r24, r24
     d1a:	82 2b       	or	r24, r18
     d1c:	93 2b       	or	r25, r19
}
     d1e:	0f 90       	pop	r0
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <UART_sendString+0x6>
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9b 83       	std	Y+3, r25	; 0x03
     d34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d36:	19 82       	std	Y+1, r1	; 0x01
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <UART_sendString+0x34>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	80 81       	ld	r24, Z
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		i++;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	fc 01       	movw	r30, r24
     d66:	e2 0f       	add	r30, r18
     d68:	f3 1f       	adc	r31, r19
     d6a:	80 81       	ld	r24, Z
     d6c:	88 23       	and	r24, r24
     d6e:	29 f7       	brne	.-54     	; 0xd3a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_receiveString+0xa>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d90:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	9b 81       	ldd	r25, Y+3	; 0x03
     d9c:	8c 01       	movw	r16, r24
     d9e:	02 0f       	add	r16, r18
     da0:	13 1f       	adc	r17, r19
     da2:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
     da6:	f8 01       	movw	r30, r16
     da8:	80 83       	st	Z, r24
     daa:	0f c0       	rjmp	.+30     	; 0xdca <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	8c 01       	movw	r16, r24
     dbe:	02 0f       	add	r16, r18
     dc0:	13 1f       	adc	r17, r19
     dc2:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	fc 01       	movw	r30, r24
     dd6:	e2 0f       	add	r30, r18
     dd8:	f3 1f       	adc	r31, r19
     dda:	80 81       	ld	r24, Z
     ddc:	83 32       	cpi	r24, 0x23	; 35
     dde:	31 f7       	brne	.-52     	; 0xdac <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	fc 01       	movw	r30, r24
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	10 82       	st	Z, r1
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <EEPROM_init>:
/*
 * Function that initialize the EEPROM by initializing I2C
 * the required prescaler, devision factor and slave address
 */
void EEPROM_init(const TWI_Config * Config_Ptr)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <EEPROM_init+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01

	TWI_init(Config_Ptr); /*Initialize I2C*/
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	0e 94 b2 07 	call	0xf64	; 0xf64 <TWI_init>
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <EEPROM_writeByte>:

//To write the required data in the given address
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <EEPROM_writeByte+0x6>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <EEPROM_writeByte+0x8>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
     e34:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TWI_start>
	if (TWI_getStatus() != TW_START)
     e38:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     e3c:	88 30       	cpi	r24, 0x08	; 8
     e3e:	11 f0       	breq	.+4      	; 0xe44 <EEPROM_writeByte+0x22>
		return ERROR;
     e40:	1c 82       	std	Y+4, r1	; 0x04
     e42:	28 c0       	rjmp	.+80     	; 0xe94 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_write((uint8)(((u16addr & 0x0700)>>7)) | 0xA0);
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	80 70       	andi	r24, 0x00	; 0
     e4a:	97 70       	andi	r25, 0x07	; 7
     e4c:	88 0f       	add	r24, r24
     e4e:	89 2f       	mov	r24, r25
     e50:	88 1f       	adc	r24, r24
     e52:	99 0b       	sbc	r25, r25
     e54:	91 95       	neg	r25
     e56:	80 6a       	ori	r24, 0xA0	; 160
     e58:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     e5c:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     e60:	88 31       	cpi	r24, 0x18	; 24
     e62:	11 f0       	breq	.+4      	; 0xe68 <EEPROM_writeByte+0x46>
		return ERROR;
     e64:	1c 82       	std	Y+4, r1	; 0x04
     e66:	16 c0       	rjmp	.+44     	; 0xe94 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_write((uint8)(u16addr));
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     e6e:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     e72:	88 32       	cpi	r24, 0x28	; 40
     e74:	11 f0       	breq	.+4      	; 0xe7a <EEPROM_writeByte+0x58>
		return ERROR;
     e76:	1c 82       	std	Y+4, r1	; 0x04
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_write(u8data);
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     e80:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     e84:	88 32       	cpi	r24, 0x28	; 40
     e86:	11 f0       	breq	.+4      	; 0xe8c <EEPROM_writeByte+0x6a>
		return ERROR;
     e88:	1c 82       	std	Y+4, r1	; 0x04
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
     e8c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <TWI_stop>

	return SUCCESS;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	8c 83       	std	Y+4, r24	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <EEPROM_readByte>:

// to read the data from the given address
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <EEPROM_readByte+0x6>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <EEPROM_readByte+0x8>
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	7c 83       	std	Y+4, r23	; 0x04
     eb8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     eba:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     ebe:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	11 f0       	breq	.+4      	; 0xeca <EEPROM_readByte+0x26>
        return ERROR;
     ec6:	1d 82       	std	Y+5, r1	; 0x05
     ec8:	44 c0       	rjmp	.+136    	; 0xf52 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	80 70       	andi	r24, 0x00	; 0
     ed0:	97 70       	andi	r25, 0x07	; 7
     ed2:	88 0f       	add	r24, r24
     ed4:	89 2f       	mov	r24, r25
     ed6:	88 1f       	adc	r24, r24
     ed8:	99 0b       	sbc	r25, r25
     eda:	91 95       	neg	r25
     edc:	80 6a       	ori	r24, 0xA0	; 160
     ede:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     ee2:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     ee6:	88 31       	cpi	r24, 0x18	; 24
     ee8:	11 f0       	breq	.+4      	; 0xeee <EEPROM_readByte+0x4a>
        return ERROR;
     eea:	1d 82       	std	Y+5, r1	; 0x05
     eec:	32 c0       	rjmp	.+100    	; 0xf52 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     ef4:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     ef8:	88 32       	cpi	r24, 0x28	; 40
     efa:	11 f0       	breq	.+4      	; 0xf00 <EEPROM_readByte+0x5c>
        return ERROR;
     efc:	1d 82       	std	Y+5, r1	; 0x05
     efe:	29 c0       	rjmp	.+82     	; 0xf52 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     f00:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     f04:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     f08:	80 31       	cpi	r24, 0x10	; 16
     f0a:	11 f0       	breq	.+4      	; 0xf10 <EEPROM_readByte+0x6c>
        return ERROR;
     f0c:	1d 82       	std	Y+5, r1	; 0x05
     f0e:	21 c0       	rjmp	.+66     	; 0xf52 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	80 70       	andi	r24, 0x00	; 0
     f16:	97 70       	andi	r25, 0x07	; 7
     f18:	88 0f       	add	r24, r24
     f1a:	89 2f       	mov	r24, r25
     f1c:	88 1f       	adc	r24, r24
     f1e:	99 0b       	sbc	r25, r25
     f20:	91 95       	neg	r25
     f22:	81 6a       	ori	r24, 0xA1	; 161
     f24:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     f28:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     f2c:	80 34       	cpi	r24, 0x40	; 64
     f2e:	11 f0       	breq	.+4      	; 0xf34 <EEPROM_readByte+0x90>
        return ERROR;
     f30:	1d 82       	std	Y+5, r1	; 0x05
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     f34:	0e 94 28 08 	call	0x1050	; 0x1050 <TWI_readWithNACK>
     f38:	eb 81       	ldd	r30, Y+3	; 0x03
     f3a:	fc 81       	ldd	r31, Y+4	; 0x04
     f3c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     f3e:	0e 94 3b 08 	call	0x1076	; 0x1076 <TWI_getStatus>
     f42:	88 35       	cpi	r24, 0x58	; 88
     f44:	11 f0       	breq	.+4      	; 0xf4a <EEPROM_readByte+0xa6>
        return ERROR;
     f46:	1d 82       	std	Y+5, r1	; 0x05
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     f4a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <TWI_stop>
    return SUCCESS;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <TWI_init>:
//FUNCTIONS DEFINITIONS                            *


 //Function that initialize the I2C
void TWI_init(const TWI_Config * Config_Ptr)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <TWI_init+0x6>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
	/*In order to configure the frequency, get TWBR
	 *Put the whole bits of TWSR zeros except the first 2 bits take them from the structure
	 */
	TWBR = Config_Ptr->s_devision_factor;
     f74:	a0 e2       	ldi	r26, 0x20	; 32
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	8c 93       	st	X, r24
	TWSR = (TWSR & 0xFC) | (Config_Ptr->prescaler);
     f80:	a1 e2       	ldi	r26, 0x21	; 33
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e1 e2       	ldi	r30, 0x21	; 33
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	98 2f       	mov	r25, r24
     f8c:	9c 7f       	andi	r25, 0xFC	; 252
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	80 81       	ld	r24, Z
     f94:	89 2b       	or	r24, r25
     f96:	8c 93       	st	X, r24

	/*Get the address from the structure, but before putting it in the register, shift it 1 bit
	 * as the General Call Recognition is disabled
	 */
	TWAR = (TWAR & 0x00) | ((Config_Ptr->s_slave_address)<<1);
     f98:	e2 e2       	ldi	r30, 0x22	; 34
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	a2 e2       	ldi	r26, 0x22	; 34
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e9 81       	ldd	r30, Y+1	; 0x01
     fa4:	fa 81       	ldd	r31, Y+2	; 0x02
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /*Enable TWI*/
     fb2:	e6 e5       	ldi	r30, 0x56	; 86
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	84 e0       	ldi	r24, 0x04	; 4
     fb8:	80 83       	st	Z, r24
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <TWI_start>:

/*Function responsible for sending the start bit*/
void TWI_start(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	/*TWINT=1: Clear TWI Interrupt Flag before sending
	 *TWSTA=1: Send start bit
	 *TWEN=1: Enable TWI
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fce:	e6 e5       	ldi	r30, 0x56	; 86
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	84 ea       	ldi	r24, 0xA4	; 164
     fd4:	80 83       	st	Z, r24

	/*Wait till TWI finish the task, and TWINT=1*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
     fd6:	e6 e5       	ldi	r30, 0x56	; 86
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	dc f7       	brge	.-10     	; 0xfd6 <TWI_start+0x10>
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <TWI_stop>:

/*Function responsible for sending the stop bit*/
void TWI_stop(void)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	/*TWINT=1: Clear TWI Interrupt Flag before sending
	 *TWSTO=1: Send stop bit
	 *TWEN=1: Enable TWI
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	84 e9       	ldi	r24, 0x94	; 148
     ff4:	80 83       	st	Z, r24
}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <TWI_write>:

/*Function responsible for sending (writing) data in the slave address sent before*/
void TWI_write(uint8 data)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	0f 92       	push	r0
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data; /*Put data in TWI Data Register*/
    1008:	e3 e2       	ldi	r30, 0x23	; 35
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	80 83       	st	Z, r24
	/*TWINT=1: Clear TWI Interrupt Flag before sending data
	 *TWEN=1: Enable TWI
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1010:	e6 e5       	ldi	r30, 0x56	; 86
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	84 e8       	ldi	r24, 0x84	; 132
    1016:	80 83       	st	Z, r24
	/*Wait till TWI finish the task, and TWINT=1*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1018:	e6 e5       	ldi	r30, 0x56	; 86
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 23       	and	r24, r24
    1020:	dc f7       	brge	.-10     	; 0x1018 <TWI_write+0x1c>
}
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <TWI_readWithACK>:

/*Function responsible for reading data from the address that was sent before and reply by ack*/
uint8 TWI_readWithACK(void)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	/*TWINT=1: Clear TWI Interrupt Flag before sending data
	 *TWEN=1: Enable TWI
	 *TWEA=1: Enable TWI Ack bit
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1032:	e6 e5       	ldi	r30, 0x56	; 86
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	84 ec       	ldi	r24, 0xC4	; 196
    1038:	80 83       	st	Z, r24
	/*Wait till TWI finish the task, and TWINT=1*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    103a:	e6 e5       	ldi	r30, 0x56	; 86
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 23       	and	r24, r24
    1042:	dc f7       	brge	.-10     	; 0x103a <TWI_readWithACK+0x10>
	return TWDR; /*Read Data*/
    1044:	e3 e2       	ldi	r30, 0x23	; 35
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <TWI_readWithNACK>:

/*Function responsible for reading data from the address
 * that was sent before without replying by ack
 */
uint8 TWI_readWithNACK(void)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	/*TWINT=1: Clear TWI Interrupt Flag before sending data
	 *TWEN=1: Enable TWI
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1058:	e6 e5       	ldi	r30, 0x56	; 86
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	84 e8       	ldi	r24, 0x84	; 132
    105e:	80 83       	st	Z, r24
	/*Wait till TWI finish the task, and TWINT=1*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1060:	e6 e5       	ldi	r30, 0x56	; 86
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	dc f7       	brge	.-10     	; 0x1060 <TWI_readWithNACK+0x10>
	return TWDR; /*Read Data*/
    106a:	e3 e2       	ldi	r30, 0x23	; 35
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <TWI_getStatus>:

/*Function responsible for getting the status of TWI*/
uint8 TWI_getStatus(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/*Get the last 5 bits in TWI Status Register*/
	status = TWSR & 0xF8;
    1080:	e1 e2       	ldi	r30, 0x21	; 33
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 7f       	andi	r24, 0xF8	; 248
    1088:	89 83       	std	Y+1, r24	; 0x01
	return status;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
}
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <Cal_Time>:


#include "main.h"

void Cal_Time(void){
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	tick++;
    109c:	80 91 7c 00 	lds	r24, 0x007C
    10a0:	90 91 7d 00 	lds	r25, 0x007D
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	90 93 7d 00 	sts	0x007D, r25
    10aa:	80 93 7c 00 	sts	0x007C, r24
	//according to the used prescalar every 30 tick=1 sec
	if (tick==30){
    10ae:	80 91 7c 00 	lds	r24, 0x007C
    10b2:	90 91 7d 00 	lds	r25, 0x007D
    10b6:	8e 31       	cpi	r24, 0x1E	; 30
    10b8:	91 05       	cpc	r25, r1
    10ba:	49 f4       	brne	.+18     	; 0x10ce <Cal_Time+0x3a>
		Sec_Flag++;
    10bc:	80 91 7b 00 	lds	r24, 0x007B
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	80 93 7b 00 	sts	0x007B, r24
		tick=0;
    10c6:	10 92 7d 00 	sts	0x007D, r1
    10ca:	10 92 7c 00 	sts	0x007C, r1
	}
}
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <Receive_Pass>:

void Receive_Pass(){
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	6e 97       	sbiw	r28, 0x1e	; 30
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61

	while(UART_recieveByte()!= SAVE){} //Wait till MC1 send SAVE to begin
    10e8:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	d9 f7       	brne	.-10     	; 0x10e8 <Receive_Pass+0x14>
	uint8 pass; //to receive the entered password from MC1
	uint8 Count_Pass;//Count number of digits(5)
	for(Count_Pass=5; Count_Pass>0; Count_Pass--)// we start from the last digit
    10f2:	85 e0       	ldi	r24, 0x05	; 5
    10f4:	8d 8f       	std	Y+29, r24	; 0x1d
    10f6:	ff c0       	rjmp	.+510    	; 0x12f6 <Receive_Pass+0x222>
	{
		UART_sendByte(M2_Ready); //MC2 is ready to receive the next digit
    10f8:	80 e1       	ldi	r24, 0x10	; 16
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		pass = UART_recieveByte();
    1100:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    1104:	8e 8f       	std	Y+30, r24	; 0x1e
		EEPROM_writeByte((0x0311+Count_Pass), pass); //Save the entered digit in specific address
    1106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	8f 5e       	subi	r24, 0xEF	; 239
    110e:	9c 4f       	sbci	r25, 0xFC	; 252
    1110:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1112:	0e 94 11 07 	call	0xe22	; 0xe22 <EEPROM_writeByte>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a4 eb       	ldi	r26, 0xB4	; 180
    111c:	b2 e4       	ldi	r27, 0x42	; 66
    111e:	89 8f       	std	Y+25, r24	; 0x19
    1120:	9a 8f       	std	Y+26, r25	; 0x1a
    1122:	ab 8f       	std	Y+27, r26	; 0x1b
    1124:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1126:	69 8d       	ldd	r22, Y+25	; 0x19
    1128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	4a e7       	ldi	r20, 0x7A	; 122
    1134:	53 e4       	ldi	r21, 0x43	; 67
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	8d 8b       	std	Y+21, r24	; 0x15
    1140:	9e 8b       	std	Y+22, r25	; 0x16
    1142:	af 8b       	std	Y+23, r26	; 0x17
    1144:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1146:	6d 89       	ldd	r22, Y+21	; 0x15
    1148:	7e 89       	ldd	r23, Y+22	; 0x16
    114a:	8f 89       	ldd	r24, Y+23	; 0x17
    114c:	98 8d       	ldd	r25, Y+24	; 0x18
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e8       	ldi	r20, 0x80	; 128
    1154:	5f e3       	ldi	r21, 0x3F	; 63
    1156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115a:	88 23       	and	r24, r24
    115c:	2c f4       	brge	.+10     	; 0x1168 <Receive_Pass+0x94>
		__ticks = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 8b       	std	Y+20, r25	; 0x14
    1164:	8b 8b       	std	Y+19, r24	; 0x13
    1166:	3f c0       	rjmp	.+126    	; 0x11e6 <Receive_Pass+0x112>
	else if (__tmp > 65535)
    1168:	6d 89       	ldd	r22, Y+21	; 0x15
    116a:	7e 89       	ldd	r23, Y+22	; 0x16
    116c:	8f 89       	ldd	r24, Y+23	; 0x17
    116e:	98 8d       	ldd	r25, Y+24	; 0x18
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	57 e4       	ldi	r21, 0x47	; 71
    1178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    117c:	18 16       	cp	r1, r24
    117e:	4c f5       	brge	.+82     	; 0x11d2 <Receive_Pass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	69 8d       	ldd	r22, Y+25	; 0x19
    1182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e2       	ldi	r20, 0x20	; 32
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	9c 8b       	std	Y+20, r25	; 0x14
    11a6:	8b 8b       	std	Y+19, r24	; 0x13
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <Receive_Pass+0xf4>
    11aa:	89 e1       	ldi	r24, 0x19	; 25
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9a 8b       	std	Y+18, r25	; 0x12
    11b0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b2:	89 89       	ldd	r24, Y+17	; 0x11
    11b4:	9a 89       	ldd	r25, Y+18	; 0x12
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <Receive_Pass+0xe2>
    11ba:	9a 8b       	std	Y+18, r25	; 0x12
    11bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11be:	8b 89       	ldd	r24, Y+19	; 0x13
    11c0:	9c 89       	ldd	r25, Y+20	; 0x14
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	9c 8b       	std	Y+20, r25	; 0x14
    11c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ca:	9c 89       	ldd	r25, Y+20	; 0x14
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	69 f7       	brne	.-38     	; 0x11aa <Receive_Pass+0xd6>
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <Receive_Pass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d2:	6d 89       	ldd	r22, Y+21	; 0x15
    11d4:	7e 89       	ldd	r23, Y+22	; 0x16
    11d6:	8f 89       	ldd	r24, Y+23	; 0x17
    11d8:	98 8d       	ldd	r25, Y+24	; 0x18
    11da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	9c 8b       	std	Y+20, r25	; 0x14
    11e4:	8b 8b       	std	Y+19, r24	; 0x13
    11e6:	8b 89       	ldd	r24, Y+19	; 0x13
    11e8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ea:	98 8b       	std	Y+16, r25	; 0x10
    11ec:	8f 87       	std	Y+15, r24	; 0x0f
    11ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f0:	98 89       	ldd	r25, Y+16	; 0x10
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <Receive_Pass+0x11e>
    11f6:	98 8b       	std	Y+16, r25	; 0x10
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(90); //Wait  to write the value in the memory

		/*write the INITIALIZED_FLAG in this address
		 * and we will check this address Every time we run code
		 * to know if the first run code is done or not yet */
		EEPROM_writeByte(0x0420, Init_Flag);
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	0e 94 11 07 	call	0xe22	; 0xe22 <EEPROM_writeByte>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a4 eb       	ldi	r26, 0xB4	; 180
    120a:	b2 e4       	ldi	r27, 0x42	; 66
    120c:	8b 87       	std	Y+11, r24	; 0x0b
    120e:	9c 87       	std	Y+12, r25	; 0x0c
    1210:	ad 87       	std	Y+13, r26	; 0x0d
    1212:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1214:	6b 85       	ldd	r22, Y+11	; 0x0b
    1216:	7c 85       	ldd	r23, Y+12	; 0x0c
    1218:	8d 85       	ldd	r24, Y+13	; 0x0d
    121a:	9e 85       	ldd	r25, Y+14	; 0x0e
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	53 e4       	ldi	r21, 0x43	; 67
    1224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8f 83       	std	Y+7, r24	; 0x07
    122e:	98 87       	std	Y+8, r25	; 0x08
    1230:	a9 87       	std	Y+9, r26	; 0x09
    1232:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e8       	ldi	r20, 0x80	; 128
    1242:	5f e3       	ldi	r21, 0x3F	; 63
    1244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1248:	88 23       	and	r24, r24
    124a:	2c f4       	brge	.+10     	; 0x1256 <Receive_Pass+0x182>
		__ticks = 1;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	3f c0       	rjmp	.+126    	; 0x12d4 <Receive_Pass+0x200>
	else if (__tmp > 65535)
    1256:	6f 81       	ldd	r22, Y+7	; 0x07
    1258:	78 85       	ldd	r23, Y+8	; 0x08
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	9a 85       	ldd	r25, Y+10	; 0x0a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	4c f5       	brge	.+82     	; 0x12c0 <Receive_Pass+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1270:	7c 85       	ldd	r23, Y+12	; 0x0c
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e2       	ldi	r20, 0x20	; 32
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <Receive_Pass+0x1e2>
    1298:	89 e1       	ldi	r24, 0x19	; 25
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <Receive_Pass+0x1d0>
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	69 f7       	brne	.-38     	; 0x1298 <Receive_Pass+0x1c4>
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <Receive_Pass+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c0:	6f 81       	ldd	r22, Y+7	; 0x07
    12c2:	78 85       	ldd	r23, Y+8	; 0x08
    12c4:	89 85       	ldd	r24, Y+9	; 0x09
    12c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9e 83       	std	Y+6, r25	; 0x06
    12d2:	8d 83       	std	Y+5, r24	; 0x05
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <Receive_Pass+0x20c>
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(90);/*Wait for 90ms to write the value in the memory*/
		UART_sendByte(Saving_Done); //Send to MC1 that saving is done
    12e8:	85 e0       	ldi	r24, 0x05	; 5
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
void Receive_Pass(){

	while(UART_recieveByte()!= SAVE){} //Wait till MC1 send SAVE to begin
	uint8 pass; //to receive the entered password from MC1
	uint8 Count_Pass;//Count number of digits(5)
	for(Count_Pass=5; Count_Pass>0; Count_Pass--)// we start from the last digit
    12f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	8d 8f       	std	Y+29, r24	; 0x1d
    12f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f8:	88 23       	and	r24, r24
    12fa:	09 f0       	breq	.+2      	; 0x12fe <Receive_Pass+0x22a>
    12fc:	fd ce       	rjmp	.-518    	; 0x10f8 <Receive_Pass+0x24>
		_delay_ms(90);/*Wait for 90ms to write the value in the memory*/
		UART_sendByte(Saving_Done); //Send to MC1 that saving is done
	}


}
    12fe:	6e 96       	adiw	r28, 0x1e	; 30
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <Check_pass>:


void Check_pass(const Timer_Config * Config_Ptr){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <Check_pass+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <Check_pass+0x8>
    1318:	00 d0       	rcall	.+0      	; 0x131a <Check_pass+0xa>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05

	while(UART_recieveByte()!= Check_Pass); // received from M1 to begin
    1322:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    1326:	87 30       	cpi	r24, 0x07	; 7
    1328:	91 05       	cpc	r25, r1
    132a:	d9 f7       	brne	.-10     	; 0x1322 <Check_pass+0x12>

	uint8 pass=0;       // to receive the entered password from MC1
    132c:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Pass_Saved=0; //to get the right stored password
    132e:	1c 82       	std	Y+4, r1	; 0x04
	uint8 error;         //to know how many times the password was wrong
	uint8 Count_Pass;    //to count the entered password digits(5)
	for(Count_Pass=5; Count_Pass>0; Count_Pass--)
    1330:	85 e0       	ldi	r24, 0x05	; 5
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	1e c0       	rjmp	.+60     	; 0x1372 <Check_pass+0x62>
	{
		/*We begin from the last digit entered*/
		pass = UART_recieveByte(); /*Receive the entered password digit from MC1*/
    1336:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    133a:	8b 83       	std	Y+3, r24	; 0x03

		/*The right password is stored in the EEPROM,
		 *so we go to the address where it should be saved and read the correct value(pass_saved)*/
		EEPROM_readByte((0x0311+Count_Pass), &Pass_Saved);
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	8f 5e       	subi	r24, 0xEF	; 239
    1344:	9c 4f       	sbci	r25, 0xFC	; 252
    1346:	9e 01       	movw	r18, r28
    1348:	2c 5f       	subi	r18, 0xFC	; 252
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	b9 01       	movw	r22, r18
    134e:	0e 94 52 07 	call	0xea4	; 0xea4 <EEPROM_readByte>
		if(pass !=Pass_Saved) /*The entered password digit not like that is stored*/
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	89 17       	cp	r24, r25
    1358:	29 f0       	breq	.+10     	; 0x1364 <Check_pass+0x54>
		{
			UART_sendByte(Error_Pass); /*Send to MC1 that there is an error in the password*/
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
    1362:	04 c0       	rjmp	.+8      	; 0x136c <Check_pass+0x5c>
		}
		else /*The entered password digit is like that is stored*/
		{
			/*Send to MC1 to continue sending the remaining digits*/
			UART_sendByte(Continue_Pass);
    1364:	88 e0       	ldi	r24, 0x08	; 8
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>

	uint8 pass=0;       // to receive the entered password from MC1
	uint8 Pass_Saved=0; //to get the right stored password
	uint8 error;         //to know how many times the password was wrong
	uint8 Count_Pass;    //to count the entered password digits(5)
	for(Count_Pass=5; Count_Pass>0; Count_Pass--)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	81 50       	subi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	88 23       	and	r24, r24
    1376:	f9 f6       	brne	.-66     	; 0x1336 <Check_pass+0x26>
			/*Send to MC1 to continue sending the remaining digits*/
			UART_sendByte(Continue_Pass);
		}
	}

	error = UART_recieveByte(); //Receive times the password was wrong
    1378:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    137c:	8a 83       	std	Y+2, r24	; 0x02
	if(error <= 2) // repeat the check function
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	28 f4       	brcc	.+10     	; 0x138e <Check_pass+0x7e>
	{
		Check_pass(Config_Ptr);
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	0e 94 88 09 	call	0x1310	; 0x1310 <Check_pass>
    138c:	20 c0       	rjmp	.+64     	; 0x13ce <Check_pass+0xbe>
	}
	else if(error == 3) //3 times wrong
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	e9 f4       	brne	.+58     	; 0x13ce <Check_pass+0xbe>
	{
		//Initialize the timer and pass the required configurations to it
		Timer_init(Config_Ptr);
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Timer_init>
		tick =0;
    139c:	10 92 7d 00 	sts	0x007D, r1
    13a0:	10 92 7c 00 	sts	0x007C, r1
		Sec_Flag =0;
    13a4:	10 92 7b 00 	sts	0x007B, r1
    13a8:	0e c0       	rjmp	.+28     	; 0x13c6 <Check_pass+0xb6>
		while (Sec_Flag != 60) //light the led , Ring the buzzer
		{
			SET_BIT(PORTD,PD2);
    13aa:	a2 e3       	ldi	r26, 0x32	; 50
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e2 e3       	ldi	r30, 0x32	; 50
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	8c 93       	st	X, r24
			SET_BIT(PORTD,PD3);
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	88 60       	ori	r24, 0x08	; 8
    13c4:	8c 93       	st	X, r24
	{
		//Initialize the timer and pass the required configurations to it
		Timer_init(Config_Ptr);
		tick =0;
		Sec_Flag =0;
		while (Sec_Flag != 60) //light the led , Ring the buzzer
    13c6:	80 91 7b 00 	lds	r24, 0x007B
    13ca:	8c 33       	cpi	r24, 0x3C	; 60
    13cc:	71 f7       	brne	.-36     	; 0x13aa <Check_pass+0x9a>
			SET_BIT(PORTD,PD2);
			SET_BIT(PORTD,PD3);
		}
	}

}
    13ce:	26 96       	adiw	r28, 0x06	; 6
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <Open_door>:

void Open_door(const Timer_Config * Config_Ptr){
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <Open_door+0x6>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01

	while(UART_recieveByte()!= UNLOCK);// received from M1 to begin
    13ee:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    13f2:	89 30       	cpi	r24, 0x09	; 9
    13f4:	91 05       	cpc	r25, r1
    13f6:	d9 f7       	brne	.-10     	; 0x13ee <Open_door+0xe>

	//Initialize the timer and pass the required configurations to it
	Timer_init(Config_Ptr);
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	0e 94 8b 0c 	call	0x1916	; 0x1916 <Timer_init>
	tick =0;
    1400:	10 92 7d 00 	sts	0x007D, r1
    1404:	10 92 7c 00 	sts	0x007C, r1
	Sec_Flag =0;
    1408:	10 92 7b 00 	sts	0x007B, r1
    140c:	0e c0       	rjmp	.+28     	; 0x142a <Open_door+0x4a>
	while(Sec_Flag != 15)//Rotate the motor
	{
		PORTC &= (~(1<<PC2));
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8b 7f       	andi	r24, 0xFB	; 251
    141a:	8c 93       	st	X, r24
		PORTC |= (1<<PC3);
    141c:	a5 e3       	ldi	r26, 0x35	; 53
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e3       	ldi	r30, 0x35	; 53
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	8c 93       	st	X, r24

	//Initialize the timer and pass the required configurations to it
	Timer_init(Config_Ptr);
	tick =0;
	Sec_Flag =0;
	while(Sec_Flag != 15)//Rotate the motor
    142a:	80 91 7b 00 	lds	r24, 0x007B
    142e:	8f 30       	cpi	r24, 0x0F	; 15
    1430:	71 f7       	brne	.-36     	; 0x140e <Open_door+0x2e>
	{
		PORTC &= (~(1<<PC2));
		PORTC |= (1<<PC3);
	}
	//count from the beginning
	tick =0;
    1432:	10 92 7d 00 	sts	0x007D, r1
    1436:	10 92 7c 00 	sts	0x007C, r1
	Sec_Flag =0;
    143a:	10 92 7b 00 	sts	0x007B, r1
    143e:	0e c0       	rjmp	.+28     	; 0x145c <Open_door+0x7c>
	//stop the motor
	while(Sec_Flag != 3)
	{
		PORTC &= (~(1<<PC2));
    1440:	a5 e3       	ldi	r26, 0x35	; 53
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e3       	ldi	r30, 0x35	; 53
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8b 7f       	andi	r24, 0xFB	; 251
    144c:	8c 93       	st	X, r24
		PORTC &= (~(1<<PC3));
    144e:	a5 e3       	ldi	r26, 0x35	; 53
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	87 7f       	andi	r24, 0xF7	; 247
    145a:	8c 93       	st	X, r24
	}
	//count from the beginning
	tick =0;
	Sec_Flag =0;
	//stop the motor
	while(Sec_Flag != 3)
    145c:	80 91 7b 00 	lds	r24, 0x007B
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	71 f7       	brne	.-36     	; 0x1440 <Open_door+0x60>
	{
		PORTC &= (~(1<<PC2));
		PORTC &= (~(1<<PC3));
	}
	// count from the beginning
	tick =0;
    1464:	10 92 7d 00 	sts	0x007D, r1
    1468:	10 92 7c 00 	sts	0x007C, r1
	Sec_Flag =0;
    146c:	10 92 7b 00 	sts	0x007B, r1
    1470:	0e c0       	rjmp	.+28     	; 0x148e <Open_door+0xae>
	// rotate the motor anti-clockwise
	while(Sec_Flag != 15)
	{
		PORTC |= (1<<PC2);
    1472:	a5 e3       	ldi	r26, 0x35	; 53
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e3       	ldi	r30, 0x35	; 53
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	84 60       	ori	r24, 0x04	; 4
    147e:	8c 93       	st	X, r24
		PORTC &= (~(1<<PC3));
    1480:	a5 e3       	ldi	r26, 0x35	; 53
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	87 7f       	andi	r24, 0xF7	; 247
    148c:	8c 93       	st	X, r24
	}
	// count from the beginning
	tick =0;
	Sec_Flag =0;
	// rotate the motor anti-clockwise
	while(Sec_Flag != 15)
    148e:	80 91 7b 00 	lds	r24, 0x007B
    1492:	8f 30       	cpi	r24, 0x0F	; 15
    1494:	71 f7       	brne	.-36     	; 0x1472 <Open_door+0x92>
		PORTC |= (1<<PC2);
		PORTC &= (~(1<<PC3));
	}

	/*Then stop the motor*/
	CLEAR_BIT(PORTC,PC2);
    1496:	a5 e3       	ldi	r26, 0x35	; 53
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e3       	ldi	r30, 0x35	; 53
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8b 7f       	andi	r24, 0xFB	; 251
    14a2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC,PC3);
    14a4:	a5 e3       	ldi	r26, 0x35	; 53
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e3       	ldi	r30, 0x35	; 53
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	87 7f       	andi	r24, 0xF7	; 247
    14b0:	8c 93       	st	X, r24
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <Main_Options>:
//To handle what user need (change the password or open the gate)
void Main_Options(const Timer_Config * Config_Ptr){
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <Main_Options+0x6>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01

	Check_pass(Config_Ptr);// to check the password
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	0e 94 88 09 	call	0x1310	; 0x1310 <Check_pass>
	//password is correct
	if(UART_recieveByte() == 0)
    14d2:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	69 f4       	brne	.+26     	; 0x14f4 <Main_Options+0x38>
	{
		if(UART_recieveByte() == '*') //change the password
    14da:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    14de:	8a 32       	cpi	r24, 0x2A	; 42
    14e0:	91 05       	cpc	r25, r1
    14e2:	19 f4       	brne	.+6      	; 0x14ea <Main_Options+0x2e>
		{
			Receive_Pass();
    14e4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Receive_Pass>
    14e8:	13 c0       	rjmp	.+38     	; 0x1510 <Main_Options+0x54>
		}
		else //open the door
		{
			Open_door(Config_Ptr);
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Open_door>
    14f2:	0e c0       	rjmp	.+28     	; 0x1510 <Main_Options+0x54>
		}
	}

	else // the password was entered wrong for 3 times
	{
		CLEAR_BIT(PORTD,PD3);
    14f4:	a2 e3       	ldi	r26, 0x32	; 50
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e2 e3       	ldi	r30, 0x32	; 50
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	87 7f       	andi	r24, 0xF7	; 247
    1500:	8c 93       	st	X, r24
		CLEAR_BIT(PORTD,PD2);/*buzz , led off as 1 min has passed*/
    1502:	a2 e3       	ldi	r26, 0x32	; 50
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	8c 93       	st	X, r24
	}

}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <main>:


int main(void)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	a1 97       	sbiw	r28, 0x21	; 33
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
	uint8 First_Run_Flag=0;// to check if the code run for the first time or not
    152e:	19 82       	std	Y+1, r1	; 0x01

	//Initiate as output pins(Input for motor)
	SET_BIT(DDRC,PC2);
    1530:	a4 e3       	ldi	r26, 0x34	; 52
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e4 e3       	ldi	r30, 0x34	; 52
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	84 60       	ori	r24, 0x04	; 4
    153c:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC3);
    153e:	a4 e3       	ldi	r26, 0x34	; 52
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e4 e3       	ldi	r30, 0x34	; 52
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	88 60       	ori	r24, 0x08	; 8
    154a:	8c 93       	st	X, r24
	SET_BIT(DDRD,PD2);
    154c:	a1 e3       	ldi	r26, 0x31	; 49
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e1 e3       	ldi	r30, 0x31	; 49
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	84 60       	ori	r24, 0x04	; 4
    1558:	8c 93       	st	X, r24
	SET_BIT(DDRD,PD3);//LED, BUZZ
    155a:	a1 e3       	ldi	r26, 0x31	; 49
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e1 e3       	ldi	r30, 0x31	; 49
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	8c 93       	st	X, r24


	//initial value =zero
	CLEAR_BIT(PORTC,PC2);
    1568:	a5 e3       	ldi	r26, 0x35	; 53
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e3       	ldi	r30, 0x35	; 53
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8b 7f       	andi	r24, 0xFB	; 251
    1574:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC,PC3);
    1576:	a5 e3       	ldi	r26, 0x35	; 53
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e3       	ldi	r30, 0x35	; 53
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	87 7f       	andi	r24, 0xF7	; 247
    1582:	8c 93       	st	X, r24

	CLEAR_BIT(PORTD,PD2);
    1584:	a2 e3       	ldi	r26, 0x32	; 50
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e2 e3       	ldi	r30, 0x32	; 50
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8b 7f       	andi	r24, 0xFB	; 251
    1590:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD3);
    1592:	a2 e3       	ldi	r26, 0x32	; 50
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e2 e3       	ldi	r30, 0x32	; 50
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	87 7f       	andi	r24, 0xF7	; 247
    159e:	8c 93       	st	X, r24


	Timer_Config Timer_Config = {timer0,OVERFLOW,CPU_1024,0,0}; //input to the timer structure
    15a0:	ce 01       	movw	r24, r28
    15a2:	02 96       	adiw	r24, 0x02	; 2
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	e2 e7       	ldi	r30, 0x72	; 114
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	fe 8b       	std	Y+22, r31	; 0x16
    15ae:	ed 8b       	std	Y+21, r30	; 0x15
    15b0:	f7 e0       	ldi	r31, 0x07	; 7
    15b2:	ff 8b       	std	Y+23, r31	; 0x17
    15b4:	ed 89       	ldd	r30, Y+21	; 0x15
    15b6:	fe 89       	ldd	r31, Y+22	; 0x16
    15b8:	00 80       	ld	r0, Z
    15ba:	8d 89       	ldd	r24, Y+21	; 0x15
    15bc:	9e 89       	ldd	r25, Y+22	; 0x16
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	9e 8b       	std	Y+22, r25	; 0x16
    15c2:	8d 8b       	std	Y+21, r24	; 0x15
    15c4:	eb 89       	ldd	r30, Y+19	; 0x13
    15c6:	fc 89       	ldd	r31, Y+20	; 0x14
    15c8:	00 82       	st	Z, r0
    15ca:	8b 89       	ldd	r24, Y+19	; 0x13
    15cc:	9c 89       	ldd	r25, Y+20	; 0x14
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	9c 8b       	std	Y+20, r25	; 0x14
    15d2:	8b 8b       	std	Y+19, r24	; 0x13
    15d4:	9f 89       	ldd	r25, Y+23	; 0x17
    15d6:	91 50       	subi	r25, 0x01	; 1
    15d8:	9f 8b       	std	Y+23, r25	; 0x17
    15da:	ef 89       	ldd	r30, Y+23	; 0x17
    15dc:	ee 23       	and	r30, r30
    15de:	51 f7       	brne	.-44     	; 0x15b4 <main+0x9a>

	/*Set the call back function pointer in the timer driver
	 to the function that calculate seconds*/
	Timer0_Overflow_CallBack(Cal_Time);
    15e0:	8a e4       	ldi	r24, 0x4A	; 74
    15e2:	98 e0       	ldi	r25, 0x08	; 8
    15e4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <Timer0_Overflow_CallBack>

	TWI_Config TWI_Config = {F_CPU_CLOCK,0x02,0x01}; //input to I2C structure
    15e8:	ce 01       	movw	r24, r28
    15ea:	09 96       	adiw	r24, 0x09	; 9
    15ec:	99 8f       	std	Y+25, r25	; 0x19
    15ee:	88 8f       	std	Y+24, r24	; 0x18
    15f0:	ef e6       	ldi	r30, 0x6F	; 111
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	fb 8f       	std	Y+27, r31	; 0x1b
    15f6:	ea 8f       	std	Y+26, r30	; 0x1a
    15f8:	f3 e0       	ldi	r31, 0x03	; 3
    15fa:	fc 8f       	std	Y+28, r31	; 0x1c
    15fc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15fe:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1600:	00 80       	ld	r0, Z
    1602:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1604:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	9b 8f       	std	Y+27, r25	; 0x1b
    160a:	8a 8f       	std	Y+26, r24	; 0x1a
    160c:	e8 8d       	ldd	r30, Y+24	; 0x18
    160e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1610:	00 82       	st	Z, r0
    1612:	88 8d       	ldd	r24, Y+24	; 0x18
    1614:	99 8d       	ldd	r25, Y+25	; 0x19
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	99 8f       	std	Y+25, r25	; 0x19
    161a:	88 8f       	std	Y+24, r24	; 0x18
    161c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161e:	91 50       	subi	r25, 0x01	; 1
    1620:	9c 8f       	std	Y+28, r25	; 0x1c
    1622:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1624:	ee 23       	and	r30, r30
    1626:	51 f7       	brne	.-44     	; 0x15fc <main+0xe2>

	UART_Config UART_Config = {disabled,bit1,bit8,9600};////input to the UART structure
    1628:	ce 01       	movw	r24, r28
    162a:	0c 96       	adiw	r24, 0x0c	; 12
    162c:	9e 8f       	std	Y+30, r25	; 0x1e
    162e:	8d 8f       	std	Y+29, r24	; 0x1d
    1630:	e8 e6       	ldi	r30, 0x68	; 104
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	f8 a3       	std	Y+32, r31	; 0x20
    1636:	ef 8f       	std	Y+31, r30	; 0x1f
    1638:	f7 e0       	ldi	r31, 0x07	; 7
    163a:	f9 a3       	std	Y+33, r31	; 0x21
    163c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    163e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1640:	00 80       	ld	r0, Z
    1642:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1644:	98 a1       	ldd	r25, Y+32	; 0x20
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	98 a3       	std	Y+32, r25	; 0x20
    164a:	8f 8f       	std	Y+31, r24	; 0x1f
    164c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    164e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1650:	00 82       	st	Z, r0
    1652:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1654:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	9e 8f       	std	Y+30, r25	; 0x1e
    165a:	8d 8f       	std	Y+29, r24	; 0x1d
    165c:	99 a1       	ldd	r25, Y+33	; 0x21
    165e:	91 50       	subi	r25, 0x01	; 1
    1660:	99 a3       	std	Y+33, r25	; 0x21
    1662:	e9 a1       	ldd	r30, Y+33	; 0x21
    1664:	ee 23       	and	r30, r30
    1666:	51 f7       	brne	.-44     	; 0x163c <main+0x122>

	EEPROM_init(& TWI_Config);
    1668:	ce 01       	movw	r24, r28
    166a:	09 96       	adiw	r24, 0x09	; 9
    166c:	0e 94 01 07 	call	0xe02	; 0xe02 <EEPROM_init>

	UART_init(& UART_Config);
    1670:	ce 01       	movw	r24, r28
    1672:	0c 96       	adiw	r24, 0x0c	; 12
    1674:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	while(1){

		while(UART_recieveByte()!= M1_Ready); //Wait till MC1 send that it's ready
    1678:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    167c:	80 32       	cpi	r24, 0x20	; 32
    167e:	91 05       	cpc	r25, r1
    1680:	d9 f7       	brne	.-10     	; 0x1678 <main+0x15e>

		//Read the address where the initialized flag should be saved
		EEPROM_readByte(0x0420, & First_Run_Flag);
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	9e 01       	movw	r18, r28
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	b9 01       	movw	r22, r18
    168e:	0e 94 52 07 	call	0xea4	; 0xea4 <EEPROM_readByte>
		UART_sendByte(First_Run_Flag); //Send to MC1 the value of the initialized flag
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>

		if(First_Run_Flag != Init_Flag)//it's not the first run
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <main+0x18e>
		{
			Receive_Pass();
    16a2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Receive_Pass>
    16a6:	e8 cf       	rjmp	.-48     	; 0x1678 <main+0x15e>
		}
		else//first rum
		{

			Main_Options(& Timer_Config);
    16a8:	ce 01       	movw	r24, r28
    16aa:	02 96       	adiw	r24, 0x02	; 2
    16ac:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <Main_Options>
    16b0:	e3 cf       	rjmp	.-58     	; 0x1678 <main+0x15e>

000016b2 <__vector_9>:

//ISR For Timer 0


ISR(TIMER0_OVF_vect)
{
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	2f 93       	push	r18
    16be:	3f 93       	push	r19
    16c0:	4f 93       	push	r20
    16c2:	5f 93       	push	r21
    16c4:	6f 93       	push	r22
    16c6:	7f 93       	push	r23
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	af 93       	push	r26
    16ce:	bf 93       	push	r27
    16d0:	ef 93       	push	r30
    16d2:	ff 93       	push	r31
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_overflow_callBackPtr != NULL_PTR)
    16dc:	80 91 7e 00 	lds	r24, 0x007E
    16e0:	90 91 7f 00 	lds	r25, 0x007F
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	29 f0       	breq	.+10     	; 0x16f2 <__vector_9+0x40>
	{
		// Call the Call Back function (using pointer to function )after each overflow
		(*g_t_0_overflow_callBackPtr)();
    16e8:	e0 91 7e 00 	lds	r30, 0x007E
    16ec:	f0 91 7f 00 	lds	r31, 0x007F
    16f0:	09 95       	icall
	}
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	bf 91       	pop	r27
    16fc:	af 91       	pop	r26
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	7f 91       	pop	r23
    1704:	6f 91       	pop	r22
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1718:	1f 92       	push	r1
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	2f 93       	push	r18
    1724:	3f 93       	push	r19
    1726:	4f 93       	push	r20
    1728:	5f 93       	push	r21
    172a:	6f 93       	push	r22
    172c:	7f 93       	push	r23
    172e:	8f 93       	push	r24
    1730:	9f 93       	push	r25
    1732:	af 93       	push	r26
    1734:	bf 93       	push	r27
    1736:	ef 93       	push	r30
    1738:	ff 93       	push	r31
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_compare_callBackPtr != NULL_PTR)
    1742:	80 91 80 00 	lds	r24, 0x0080
    1746:	90 91 81 00 	lds	r25, 0x0081
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	29 f0       	breq	.+10     	; 0x1758 <__vector_19+0x40>
	{
		/* Call the Call Back function (using pointer to function)
		after the timer reach the compare value*/

		(*g_t_0_compare_callBackPtr)();
    174e:	e0 91 80 00 	lds	r30, 0x0080
    1752:	f0 91 81 00 	lds	r31, 0x0081
    1756:	09 95       	icall

	}
}
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	ff 91       	pop	r31
    175e:	ef 91       	pop	r30
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	7f 91       	pop	r23
    176a:	6f 91       	pop	r22
    176c:	5f 91       	pop	r21
    176e:	4f 91       	pop	r20
    1770:	3f 91       	pop	r19
    1772:	2f 91       	pop	r18
    1774:	0f 90       	pop	r0
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	0f 90       	pop	r0
    177a:	1f 90       	pop	r1
    177c:	18 95       	reti

0000177e <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    177e:	1f 92       	push	r1
    1780:	0f 92       	push	r0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	0f 92       	push	r0
    1786:	11 24       	eor	r1, r1
    1788:	2f 93       	push	r18
    178a:	3f 93       	push	r19
    178c:	4f 93       	push	r20
    178e:	5f 93       	push	r21
    1790:	6f 93       	push	r22
    1792:	7f 93       	push	r23
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	af 93       	push	r26
    179a:	bf 93       	push	r27
    179c:	ef 93       	push	r30
    179e:	ff 93       	push	r31
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	if(g_t_1_overflow_callBackPtr != NULL_PTR)
    17a8:	80 91 82 00 	lds	r24, 0x0082
    17ac:	90 91 83 00 	lds	r25, 0x0083
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	29 f0       	breq	.+10     	; 0x17be <__vector_8+0x40>
	{
		// Call the Call Back function (using pointer to function) after each overflow
		(*g_t_1_overflow_callBackPtr)();
    17b4:	e0 91 82 00 	lds	r30, 0x0082
    17b8:	f0 91 83 00 	lds	r31, 0x0083
    17bc:	09 95       	icall
	}
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	7f 91       	pop	r23
    17d0:	6f 91       	pop	r22
    17d2:	5f 91       	pop	r21
    17d4:	4f 91       	pop	r20
    17d6:	3f 91       	pop	r19
    17d8:	2f 91       	pop	r18
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f 90       	pop	r0
    17e0:	1f 90       	pop	r1
    17e2:	18 95       	reti

000017e4 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
	if(g_t_1_compare_callBackPtr != NULL_PTR)
    180e:	80 91 84 00 	lds	r24, 0x0084
    1812:	90 91 85 00 	lds	r25, 0x0085
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	29 f0       	breq	.+10     	; 0x1824 <__vector_6+0x40>
	{
		/* Call the Call Back function (using pointer to function)
		after the timer reach the compare value*/
		(*g_t_1_compare_callBackPtr)();
    181a:	e0 91 84 00 	lds	r30, 0x0084
    181e:	f0 91 85 00 	lds	r31, 0x0085
    1822:	09 95       	icall
	}
}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	ff 91       	pop	r31
    182a:	ef 91       	pop	r30
    182c:	bf 91       	pop	r27
    182e:	af 91       	pop	r26
    1830:	9f 91       	pop	r25
    1832:	8f 91       	pop	r24
    1834:	7f 91       	pop	r23
    1836:	6f 91       	pop	r22
    1838:	5f 91       	pop	r21
    183a:	4f 91       	pop	r20
    183c:	3f 91       	pop	r19
    183e:	2f 91       	pop	r18
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

0000184a <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	2f 93       	push	r18
    1856:	3f 93       	push	r19
    1858:	4f 93       	push	r20
    185a:	5f 93       	push	r21
    185c:	6f 93       	push	r22
    185e:	7f 93       	push	r23
    1860:	8f 93       	push	r24
    1862:	9f 93       	push	r25
    1864:	af 93       	push	r26
    1866:	bf 93       	push	r27
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	if(g_t_2_overflow_callBackPtr != NULL_PTR)
    1874:	80 91 86 00 	lds	r24, 0x0086
    1878:	90 91 87 00 	lds	r25, 0x0087
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	29 f0       	breq	.+10     	; 0x188a <__vector_4+0x40>
	{
		// Call the Call Back function (using pointer to function) after each overflow
		(*g_t_2_overflow_callBackPtr)();
    1880:	e0 91 86 00 	lds	r30, 0x0086
    1884:	f0 91 87 00 	lds	r31, 0x0087
    1888:	09 95       	icall
	}
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	if(g_t_2_compare_callBackPtr != NULL_PTR)
    18da:	80 91 88 00 	lds	r24, 0x0088
    18de:	90 91 89 00 	lds	r25, 0x0089
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <__vector_3+0x40>
	{

		/* Call the Call Back function (using pointer to function)
		after the timer reach the compare value*/

		(*g_t_2_compare_callBackPtr)();
    18e6:	e0 91 88 00 	lds	r30, 0x0088
    18ea:	f0 91 89 00 	lds	r31, 0x0089
    18ee:	09 95       	icall
	}
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <Timer_init>:


//Function that initialize the timer

void Timer_init(const Timer_Config * Config_Ptr)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	2a 97       	sbiw	r28, 0x0a	; 10
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	98 87       	std	Y+8, r25	; 0x08
    192c:	8f 83       	std	Y+7, r24	; 0x07
	CLEAR_BIT(SREG,7); //Disable I-bit at the beginning
    192e:	af e5       	ldi	r26, 0x5F	; 95
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	ef e5       	ldi	r30, 0x5F	; 95
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8f 77       	andi	r24, 0x7F	; 127
    193a:	8c 93       	st	X, r24

	uint16 timer_number,mode,scalar;
	mode = Config_Ptr->mode;
    193c:	ef 81       	ldd	r30, Y+7	; 0x07
    193e:	f8 85       	ldd	r31, Y+8	; 0x08
    1940:	81 81       	ldd	r24, Z+1	; 0x01
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
	timer_number = Config_Ptr->num;
    194a:	ef 81       	ldd	r30, Y+7	; 0x07
    194c:	f8 85       	ldd	r31, Y+8	; 0x08
    194e:	80 81       	ld	r24, Z
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05

	/*prescalars in the enum is for timer2
	 * so we'll customize them for timer0 and timer1
	 * for timer0 and timer1 we'll use scalar
	 * but for timer2 we'll use Config_Ptr->scalar */
	scalar = Config_Ptr->scalar;
    1958:	ef 81       	ldd	r30, Y+7	; 0x07
    195a:	f8 85       	ldd	r31, Y+8	; 0x08
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	switch(scalar)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	9a 87       	std	Y+10, r25	; 0x0a
    196c:	89 87       	std	Y+9, r24	; 0x09
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	86 30       	cpi	r24, 0x06	; 6
    1974:	91 05       	cpc	r25, r1
    1976:	79 f0       	breq	.+30     	; 0x1996 <Timer_init+0x80>
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	87 30       	cpi	r24, 0x07	; 7
    197e:	91 05       	cpc	r25, r1
    1980:	79 f0       	breq	.+30     	; 0x19a0 <Timer_init+0x8a>
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	91 05       	cpc	r25, r1
    198a:	71 f4       	brne	.+28     	; 0x19a8 <Timer_init+0x92>
	{
	case 4: //if it's 4 (clk/64) then it's 3 in Timers 0 & 1
		scalar =3;
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <Timer_init+0x92>
		break;
	case 6: //if it's 6 (clk/256) then it's 4 in Timers 0 & 1
		scalar =4;
    1996:	84 e0       	ldi	r24, 0x04	; 4
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <Timer_init+0x92>
		break;
	case 7: //if it's 7 (clk/1024) then it's 5 in Timers 0 & 1
		scalar =5;
    19a0:	85 e0       	ldi	r24, 0x05	; 5
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if(timer_number == 0) //timer0
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <Timer_init+0x9c>
    19b0:	40 c0       	rjmp	.+128    	; 0x1a32 <Timer_init+0x11c>
	{
		//we assume it's a normal mode at the beginning
		SET_BIT(TCCR0,FOC0);//Non_PWM mode
    19b2:	a3 e5       	ldi	r26, 0x53	; 83
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e3 e5       	ldi	r30, 0x53	; 83
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 68       	ori	r24, 0x80	; 128
    19be:	8c 93       	st	X, r24
		if(mode == 1)//compare
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	91 05       	cpc	r25, r1
    19c8:	71 f4       	brne	.+28     	; 0x19e6 <Timer_init+0xd0>
		{
			TCCR0 |= (1<<WGM01); // compare mode
    19ca:	a3 e5       	ldi	r26, 0x53	; 83
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e3 e5       	ldi	r30, 0x53	; 83
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	88 60       	ori	r24, 0x08	; 8
    19d6:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->s_comp; //get the compare value
    19d8:	ac e5       	ldi	r26, 0x5C	; 92
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ef 81       	ldd	r30, Y+7	; 0x07
    19de:	f8 85       	ldd	r31, Y+8	; 0x08
    19e0:	85 81       	ldd	r24, Z+5	; 0x05
    19e2:	96 81       	ldd	r25, Z+6	; 0x06
    19e4:	8c 93       	st	X, r24
		}
		TCCR0 = (TCCR0 & 0xF8) |scalar;// put the prescalar value in the first 3bits
    19e6:	a3 e5       	ldi	r26, 0x53	; 83
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e3 e5       	ldi	r30, 0x53	; 83
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	98 2f       	mov	r25, r24
    19f2:	98 7f       	andi	r25, 0xF8	; 248
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	89 2b       	or	r24, r25
    19f8:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->s_initial;// the initial value
    19fa:	a2 e5       	ldi	r26, 0x52	; 82
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ef 81       	ldd	r30, Y+7	; 0x07
    1a00:	f8 85       	ldd	r31, Y+8	; 0x08
    1a02:	83 81       	ldd	r24, Z+3	; 0x03
    1a04:	94 81       	ldd	r25, Z+4	; 0x04
    1a06:	8c 93       	st	X, r24
		if(mode == 1) // compare
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	41 f4       	brne	.+16     	; 0x1a22 <Timer_init+0x10c>
		{
			SET_BIT(TIMSK,OCIE0);//enable the output compare match interrupt
    1a12:	a9 e5       	ldi	r26, 0x59	; 89
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e9 e5       	ldi	r30, 0x59	; 89
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	82 60       	ori	r24, 0x02	; 2
    1a1e:	8c 93       	st	X, r24
    1a20:	95 c0       	rjmp	.+298    	; 0x1b4c <Timer_init+0x236>
		}
		else// overflow
		{
			SET_BIT(TIMSK,TOIE0);//enable the overflow interrupt
    1a22:	a9 e5       	ldi	r26, 0x59	; 89
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e9 e5       	ldi	r30, 0x59	; 89
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	81 60       	ori	r24, 0x01	; 1
    1a2e:	8c 93       	st	X, r24
    1a30:	8d c0       	rjmp	.+282    	; 0x1b4c <Timer_init+0x236>
		}
	}

	else if(timer_number == 1) // timer1
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	91 05       	cpc	r25, r1
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <Timer_init+0x128>
    1a3c:	48 c0       	rjmp	.+144    	; 0x1ace <Timer_init+0x1b8>
	{
		// Non_PWM mode
		SET_BIT(TCCR1A,FOC1A);
    1a3e:	af e4       	ldi	r26, 0x4F	; 79
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ef e4       	ldi	r30, 0x4F	; 79
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	88 60       	ori	r24, 0x08	; 8
    1a4a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1a4c:	af e4       	ldi	r26, 0x4F	; 79
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	ef e4       	ldi	r30, 0x4F	; 79
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	84 60       	ori	r24, 0x04	; 4
    1a58:	8c 93       	st	X, r24
		if(mode == 1)//compare
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	91 05       	cpc	r25, r1
    1a62:	69 f4       	brne	.+26     	; 0x1a7e <Timer_init+0x168>
		{
			TCCR1B = (1<<WGM12); // Compare mode
    1a64:	ee e4       	ldi	r30, 0x4E	; 78
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	88 e0       	ldi	r24, 0x08	; 8
    1a6a:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->s_comp; //get the compare value
    1a6c:	aa e4       	ldi	r26, 0x4A	; 74
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ef 81       	ldd	r30, Y+7	; 0x07
    1a72:	f8 85       	ldd	r31, Y+8	; 0x08
    1a74:	85 81       	ldd	r24, Z+5	; 0x05
    1a76:	96 81       	ldd	r25, Z+6	; 0x06
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	9c 93       	st	X, r25
    1a7c:	8e 93       	st	-X, r24
		}
		TCCR1B = (TCCR1B & 0xF8) | scalar; // put the prescalar value in the first 3bits
    1a7e:	ae e4       	ldi	r26, 0x4E	; 78
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	ee e4       	ldi	r30, 0x4E	; 78
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	98 2f       	mov	r25, r24
    1a8a:	98 7f       	andi	r25, 0xF8	; 248
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	89 2b       	or	r24, r25
    1a90:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->s_initial; // the initial value
    1a92:	ac e4       	ldi	r26, 0x4C	; 76
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef 81       	ldd	r30, Y+7	; 0x07
    1a98:	f8 85       	ldd	r31, Y+8	; 0x08
    1a9a:	83 81       	ldd	r24, Z+3	; 0x03
    1a9c:	94 81       	ldd	r25, Z+4	; 0x04
    1a9e:	11 96       	adiw	r26, 0x01	; 1
    1aa0:	9c 93       	st	X, r25
    1aa2:	8e 93       	st	-X, r24
		if(mode==1)//compare
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	41 f4       	brne	.+16     	; 0x1abe <Timer_init+0x1a8>
		{
			SET_BIT(TIMSK,OCIE1A);//enable the output compare A match interrupt
    1aae:	a9 e5       	ldi	r26, 0x59	; 89
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e9 e5       	ldi	r30, 0x59	; 89
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 61       	ori	r24, 0x10	; 16
    1aba:	8c 93       	st	X, r24
    1abc:	47 c0       	rjmp	.+142    	; 0x1b4c <Timer_init+0x236>
		}

		else //overflow
		{
			SET_BIT(TIMSK,TOIE1);//enable the overflow interrupt
    1abe:	a9 e5       	ldi	r26, 0x59	; 89
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e9 e5       	ldi	r30, 0x59	; 89
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	84 60       	ori	r24, 0x04	; 4
    1aca:	8c 93       	st	X, r24
    1acc:	3f c0       	rjmp	.+126    	; 0x1b4c <Timer_init+0x236>
		}

	}
	else //timer2
	{
		SET_BIT(TCCR2,FOC2);//Non_PWM mode
    1ace:	a5 e4       	ldi	r26, 0x45	; 69
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e5 e4       	ldi	r30, 0x45	; 69
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	8c 93       	st	X, r24
		if(mode==1)//compare
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	71 f4       	brne	.+28     	; 0x1b02 <Timer_init+0x1ec>
		{
			TCCR2 |= (1<<WGM21); //compare mode
    1ae6:	a5 e4       	ldi	r26, 0x45	; 69
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e4       	ldi	r30, 0x45	; 69
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 60       	ori	r24, 0x08	; 8
    1af2:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->s_comp; //get the compare value
    1af4:	a3 e4       	ldi	r26, 0x43	; 67
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ef 81       	ldd	r30, Y+7	; 0x07
    1afa:	f8 85       	ldd	r31, Y+8	; 0x08
    1afc:	85 81       	ldd	r24, Z+5	; 0x05
    1afe:	96 81       	ldd	r25, Z+6	; 0x06
    1b00:	8c 93       	st	X, r24
		}
		TCCR2 = (TCCR2 & 0xF8) |scalar;// put the prescalar value in the first 3bits
    1b02:	a5 e4       	ldi	r26, 0x45	; 69
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e4       	ldi	r30, 0x45	; 69
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	98 7f       	andi	r25, 0xF8	; 248
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	89 2b       	or	r24, r25
    1b14:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->s_initial;// the initial value
    1b16:	a4 e4       	ldi	r26, 0x44	; 68
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b1e:	83 81       	ldd	r24, Z+3	; 0x03
    1b20:	94 81       	ldd	r25, Z+4	; 0x04
    1b22:	8c 93       	st	X, r24
		if(mode==1)//compare
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	41 f4       	brne	.+16     	; 0x1b3e <Timer_init+0x228>
		{
			SET_BIT(TIMSK,OCIE2);//enable the output compare match interrupt
    1b2e:	a9 e5       	ldi	r26, 0x59	; 89
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e9 e5       	ldi	r30, 0x59	; 89
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 68       	ori	r24, 0x80	; 128
    1b3a:	8c 93       	st	X, r24
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <Timer_init+0x236>
		}
		else //overflow
		{
			SET_BIT(TIMSK,TOIE2);//enable the overflow interrupt
    1b3e:	a9 e5       	ldi	r26, 0x59	; 89
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e9 e5       	ldi	r30, 0x59	; 89
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 64       	ori	r24, 0x40	; 64
    1b4a:	8c 93       	st	X, r24
		}


	}

	SET_BIT(SREG,7); //enable I-bit
    1b4c:	af e5       	ldi	r26, 0x5F	; 95
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ef e5       	ldi	r30, 0x5F	; 95
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 68       	ori	r24, 0x80	; 128
    1b58:	8c 93       	st	X, r24
}//end of init function
    1b5a:	2a 96       	adiw	r28, 0x0a	; 10
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <Timer0_Overflow_CallBack>:

//Functions to set the Call Back function address

//for Timer0 at overflow mode
void Timer0_Overflow_CallBack(void(*a_t0_overflow_ptr)(void))
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <Timer0_Overflow_CallBack+0x6>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_0_overflow_callBackPtr = a_t0_overflow_ptr;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	90 93 7f 00 	sts	0x007F, r25
    1b82:	80 93 7e 00 	sts	0x007E, r24
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <Timer0_Compare_CallBack>:


//for Timer0 at compare mode
void Timer0_Compare_CallBack(void(*a_t0_compare_ptr)(void))
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <Timer0_Compare_CallBack+0x6>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_0_compare_callBackPtr = a_t0_compare_ptr;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	90 93 81 00 	sts	0x0081, r25
    1ba6:	80 93 80 00 	sts	0x0080, r24
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <Timer1_Overflow_CallBack>:

//for Timer1 at overflow mode

void Timer1_Overflow_CallBack(void(*a_t1_overflow_ptr)(void))
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <Timer1_Overflow_CallBack+0x6>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_1_overflow_callBackPtr = a_t1_overflow_ptr;
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	90 93 83 00 	sts	0x0083, r25
    1bca:	80 93 82 00 	sts	0x0082, r24
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <Timer1_Compare_CallBack>:

//for Timer1 at compare mode
void Timer1_Compare_CallBack(void(*a_t1_compare_ptr)(void))
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <Timer1_Compare_CallBack+0x6>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_1_compare_callBackPtr = a_t1_compare_ptr;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	90 93 85 00 	sts	0x0085, r25
    1bee:	80 93 84 00 	sts	0x0084, r24
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <Timer2_Overflow_CallBack>:


//for Timer2 at overflow mode

void Timer2_Overflow_CallBack(void(*a_t2_overflow_ptr)(void))
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <Timer2_Overflow_CallBack+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_2_overflow_callBackPtr = a_t2_overflow_ptr;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	90 93 87 00 	sts	0x0087, r25
    1c12:	80 93 86 00 	sts	0x0086, r24
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <Timer2_Compare_CallBack>:


//for Timer0 at compare mode
void Timer2_Compare_CallBack(void(*a_t2_compare_ptr)(void))
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <Timer2_Compare_CallBack+0x6>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_2_compare_callBackPtr = a_t2_compare_ptr;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	90 93 89 00 	sts	0x0089, r25
    1c36:	80 93 88 00 	sts	0x0088, r24
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <__udivmodsi4>:
    1c44:	a1 e2       	ldi	r26, 0x21	; 33
    1c46:	1a 2e       	mov	r1, r26
    1c48:	aa 1b       	sub	r26, r26
    1c4a:	bb 1b       	sub	r27, r27
    1c4c:	fd 01       	movw	r30, r26
    1c4e:	0d c0       	rjmp	.+26     	; 0x1c6a <__udivmodsi4_ep>

00001c50 <__udivmodsi4_loop>:
    1c50:	aa 1f       	adc	r26, r26
    1c52:	bb 1f       	adc	r27, r27
    1c54:	ee 1f       	adc	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	a2 17       	cp	r26, r18
    1c5a:	b3 07       	cpc	r27, r19
    1c5c:	e4 07       	cpc	r30, r20
    1c5e:	f5 07       	cpc	r31, r21
    1c60:	20 f0       	brcs	.+8      	; 0x1c6a <__udivmodsi4_ep>
    1c62:	a2 1b       	sub	r26, r18
    1c64:	b3 0b       	sbc	r27, r19
    1c66:	e4 0b       	sbc	r30, r20
    1c68:	f5 0b       	sbc	r31, r21

00001c6a <__udivmodsi4_ep>:
    1c6a:	66 1f       	adc	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	1a 94       	dec	r1
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <__udivmodsi4_loop>
    1c76:	60 95       	com	r22
    1c78:	70 95       	com	r23
    1c7a:	80 95       	com	r24
    1c7c:	90 95       	com	r25
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	bd 01       	movw	r22, r26
    1c84:	cf 01       	movw	r24, r30
    1c86:	08 95       	ret

00001c88 <__prologue_saves__>:
    1c88:	2f 92       	push	r2
    1c8a:	3f 92       	push	r3
    1c8c:	4f 92       	push	r4
    1c8e:	5f 92       	push	r5
    1c90:	6f 92       	push	r6
    1c92:	7f 92       	push	r7
    1c94:	8f 92       	push	r8
    1c96:	9f 92       	push	r9
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	ca 1b       	sub	r28, r26
    1cb2:	db 0b       	sbc	r29, r27
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	09 94       	ijmp

00001cc0 <__epilogue_restores__>:
    1cc0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cc2:	39 88       	ldd	r3, Y+17	; 0x11
    1cc4:	48 88       	ldd	r4, Y+16	; 0x10
    1cc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cca:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ccc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cce:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cd2:	b9 84       	ldd	r11, Y+9	; 0x09
    1cd4:	c8 84       	ldd	r12, Y+8	; 0x08
    1cd6:	df 80       	ldd	r13, Y+7	; 0x07
    1cd8:	ee 80       	ldd	r14, Y+6	; 0x06
    1cda:	fd 80       	ldd	r15, Y+5	; 0x05
    1cdc:	0c 81       	ldd	r16, Y+4	; 0x04
    1cde:	1b 81       	ldd	r17, Y+3	; 0x03
    1ce0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ce2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce4:	ce 0f       	add	r28, r30
    1ce6:	d1 1d       	adc	r29, r1
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	ed 01       	movw	r28, r26
    1cf4:	08 95       	ret

00001cf6 <_exit>:
    1cf6:	f8 94       	cli

00001cf8 <__stop_program>:
    1cf8:	ff cf       	rjmp	.-2      	; 0x1cf8 <__stop_program>
