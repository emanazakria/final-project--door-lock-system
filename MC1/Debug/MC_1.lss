
MC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00002b98  00002c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080010c  0080010c  00002cd8  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001262  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006742  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006882  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000069f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000863b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009526  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_3>
      10:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__vector_8>
      24:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 11 	call	0x2384	; 0x2384 <main>
      8a:	0c 94 ca 15 	jmp	0x2b94	; 0x2b94 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ef       	ldi	r26, 0xF6	; 246
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 ef       	ldi	r24, 0xF6	; 246
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
/*in this function , we want to
 * set the parity
 * chosse stop bits
 * choose number of bits (size of data sent)
 * set the required baudrate */
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	29 97       	sbiw	r28, 0x09	; 9
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9f 83       	std	Y+7, r25	; 0x07
     b5c:	8e 83       	std	Y+6, r24	; 0x06
	uint32 baudrate;
	uint8 BAUD_PRESCALE; //to put in it the baud_prescale according to the equation

	UCSRA = (1<<U2X);// for double transmission speed
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b66:	ea e2       	ldi	r30, 0x2A	; 42
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	88 e1       	ldi	r24, 0x18	; 24
     b6c:	80 83       	st	Z, r24

	if(Config_Ptr->size ==7 )//9bit data
     b6e:	ee 81       	ldd	r30, Y+6	; 0x06
     b70:	ff 81       	ldd	r31, Y+7	; 0x07
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	87 30       	cpi	r24, 0x07	; 7
     b76:	51 f4       	brne	.+20     	; 0xb8c <UART_init+0x46>
	{
		UCSRB |= (1<<UCSZ2); // 9-bits data
     b78:	aa e2       	ldi	r26, 0x2A	; 42
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ea e2       	ldi	r30, 0x2A	; 42
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
		flag_9bits =1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 0c 01 	sts	0x010C, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
     b8c:	e0 e4       	ldi	r30, 0x40	; 64
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 e8       	ldi	r24, 0x80	; 128
     b92:	80 83       	st	Z, r24

	switch(Config_Ptr->parity)// to choose the parity (even or odd modes only)
     b94:	ee 81       	ldd	r30, Y+6	; 0x06
     b96:	ff 81       	ldd	r31, Y+7	; 0x07
     b98:	80 81       	ld	r24, Z
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	39 87       	std	Y+9, r19	; 0x09
     ba0:	28 87       	std	Y+8, r18	; 0x08
     ba2:	88 85       	ldd	r24, Y+8	; 0x08
     ba4:	99 85       	ldd	r25, Y+9	; 0x09
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	31 f0       	breq	.+12     	; 0xbb8 <UART_init+0x72>
     bac:	28 85       	ldd	r18, Y+8	; 0x08
     bae:	39 85       	ldd	r19, Y+9	; 0x09
     bb0:	23 30       	cpi	r18, 0x03	; 3
     bb2:	31 05       	cpc	r19, r1
     bb4:	49 f0       	breq	.+18     	; 0xbc8 <UART_init+0x82>
     bb6:	0f c0       	rjmp	.+30     	; 0xbd6 <UART_init+0x90>
	{
	case 2:
		UCSRC |= (1<<UPM1); //Even parity
     bb8:	a0 e4       	ldi	r26, 0x40	; 64
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e0 e4       	ldi	r30, 0x40	; 64
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	8c 93       	st	X, r24
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <UART_init+0x90>
		break;
	case 3:
		UCSRC |= (1<<UPM0) | (1<<UPM1); //Odd parity
     bc8:	a0 e4       	ldi	r26, 0x40	; 64
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 63       	ori	r24, 0x30	; 48
     bd4:	8c 93       	st	X, r24
		break;
	}
	switch(Config_Ptr->stop)// to choose number of stop bits
     bd6:	ee 81       	ldd	r30, Y+6	; 0x06
     bd8:	ff 81       	ldd	r31, Y+7	; 0x07
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	39 f4       	brne	.+14     	; 0xbf4 <UART_init+0xae>
	{
	case 1:
		UCSRC |= (1<<USBS); // 2bits to stop
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e0 e4       	ldi	r30, 0x40	; 64
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	8c 93       	st	X, r24
	}

	//put the chosen size in the 2nd,3rd and 4th bits in UCSRC
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->size)<<1);
     bf4:	a0 e4       	ldi	r26, 0x40	; 64
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e4       	ldi	r30, 0x40	; 64
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	28 2f       	mov	r18, r24
     c00:	29 7f       	andi	r18, 0xF9	; 249
     c02:	ee 81       	ldd	r30, Y+6	; 0x06
     c04:	ff 81       	ldd	r31, Y+7	; 0x07
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	82 2b       	or	r24, r18
     c12:	8c 93       	st	X, r24

	//First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	baudrate = Config_Ptr->BaudRate;
     c14:	ee 81       	ldd	r30, Y+6	; 0x06
     c16:	ff 81       	ldd	r31, Y+7	; 0x07
     c18:	83 81       	ldd	r24, Z+3	; 0x03
     c1a:	94 81       	ldd	r25, Z+4	; 0x04
     c1c:	a5 81       	ldd	r26, Z+5	; 0x05
     c1e:	b6 81       	ldd	r27, Z+6	; 0x06
     c20:	8a 83       	std	Y+2, r24	; 0x02
     c22:	9b 83       	std	Y+3, r25	; 0x03
     c24:	ac 83       	std	Y+4, r26	; 0x04
     c26:	bd 83       	std	Y+5, r27	; 0x05
	BAUD_PRESCALE= ((F_CPU / (baudrate * 8UL)) - 1);
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	ac 81       	ldd	r26, Y+4	; 0x04
     c2e:	bd 81       	ldd	r27, Y+5	; 0x05
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	aa 1f       	adc	r26, r26
     c36:	bb 1f       	adc	r27, r27
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	aa 1f       	adc	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	aa 1f       	adc	r26, r26
     c46:	bb 1f       	adc	r27, r27
     c48:	9c 01       	movw	r18, r24
     c4a:	ad 01       	movw	r20, r26
     c4c:	80 e4       	ldi	r24, 0x40	; 64
     c4e:	92 e4       	ldi	r25, 0x42	; 66
     c50:	af e0       	ldi	r26, 0x0F	; 15
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__udivmodsi4>
     c5c:	da 01       	movw	r26, r20
     c5e:	c9 01       	movw	r24, r18
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = BAUD_PRESCALE>>8;
     c64:	e0 e4       	ldi	r30, 0x40	; 64
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	88 2f       	mov	r24, r24
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	89 2f       	mov	r24, r25
     c70:	99 0f       	add	r25, r25
     c72:	99 0b       	sbc	r25, r25
     c74:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALE;
     c76:	e9 e2       	ldi	r30, 0x29	; 41
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	80 83       	st	Z, r24
}
     c7e:	29 96       	adiw	r28, 0x09	; 9
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <UART_sendByte>:

void UART_sendByte(const uint16 data)
{   uint8 bit_9=0;   // to get the bit number 9 of data
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_sendByte+0x6>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02
     ca0:	19 82       	std	Y+1, r1	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     ca2:	eb e2       	ldi	r30, 0x2B	; 43
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	80 72       	andi	r24, 0x20	; 32
     cae:	90 70       	andi	r25, 0x00	; 0
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	b9 f3       	breq	.-18     	; 0xca2 <UART_sendByte+0x12>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	if(flag_9bits==1)
     cb4:	80 91 0c 01 	lds	r24, 0x010C
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	59 f4       	brne	.+22     	; 0xcd2 <UART_sendByte+0x42>
	{
		bit_9= data & (1<<8);  // to get the bit number 9 of data
     cbc:	19 82       	std	Y+1, r1	; 0x01
		UCSRB = (UCSRB & 0xFE) | bit_9; //Put this bit in TXB8
     cbe:	aa e2       	ldi	r26, 0x2A	; 42
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ea e2       	ldi	r30, 0x2A	; 42
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	98 2f       	mov	r25, r24
     cca:	9e 7f       	andi	r25, 0xFE	; 254
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	89 2b       	or	r24, r25
     cd0:	8c 93       	st	X, r24
	}
	UDR = data;
     cd2:	ec e2       	ldi	r30, 0x2C	; 44
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	80 83       	st	Z, r24
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <UART_recieveByte>:

uint16 UART_recieveByte(void)
{     uint8 bit_9=0;   // to get the bit number 9 of data
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	0f 92       	push	r0
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	19 82       	std	Y+1, r1	; 0x01
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     cf2:	eb e2       	ldi	r30, 0x2B	; 43
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 23       	and	r24, r24
     cfa:	dc f7       	brge	.-10     	; 0xcf2 <UART_recieveByte+0xc>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
	bit_9 = (UCSRB & 1); //Read the bit number 9
     cfc:	ea e2       	ldi	r30, 0x2A	; 42
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01
	return (UDR | (bit_9<<8));
     d06:	ec e2       	ldi	r30, 0x2C	; 44
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 2f       	mov	r24, r24
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	98 2f       	mov	r25, r24
     d18:	88 27       	eor	r24, r24
     d1a:	82 2b       	or	r24, r18
     d1c:	93 2b       	or	r25, r19
}
     d1e:	0f 90       	pop	r0
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <UART_sendString+0x6>
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9b 83       	std	Y+3, r25	; 0x03
     d34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d36:	19 82       	std	Y+1, r1	; 0x01
     d38:	10 c0       	rjmp	.+32     	; 0xd5a <UART_sendString+0x34>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	80 81       	ld	r24, Z
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		i++;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	fc 01       	movw	r30, r24
     d66:	e2 0f       	add	r30, r18
     d68:	f3 1f       	adc	r31, r19
     d6a:	80 81       	ld	r24, Z
     d6c:	88 23       	and	r24, r24
     d6e:	29 f7       	brne	.-54     	; 0xd3a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <UART_receiveString+0xa>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d90:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	9b 81       	ldd	r25, Y+3	; 0x03
     d9c:	8c 01       	movw	r16, r24
     d9e:	02 0f       	add	r16, r18
     da0:	13 1f       	adc	r17, r19
     da2:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
     da6:	f8 01       	movw	r30, r16
     da8:	80 83       	st	Z, r24
     daa:	0f c0       	rjmp	.+30     	; 0xdca <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	8c 01       	movw	r16, r24
     dbe:	02 0f       	add	r16, r18
     dc0:	13 1f       	adc	r17, r19
     dc2:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	fc 01       	movw	r30, r24
     dd6:	e2 0f       	add	r30, r18
     dd8:	f3 1f       	adc	r31, r19
     dda:	80 81       	ld	r24, Z
     ddc:	83 32       	cpi	r24, 0x23	; 35
     dde:	31 f7       	brne	.-52     	; 0xdac <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	9b 81       	ldd	r25, Y+3	; 0x03
     dea:	fc 01       	movw	r30, r24
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	10 82       	st	Z, r1
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <KeyPad_getPressedKey+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     e0c:	1a 82       	std	Y+2, r1	; 0x02
     e0e:	4c c0       	rjmp	.+152    	; 0xea8 <KeyPad_getPressedKey+0xa6>
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b00010000<<col);
     e10:	ea e3       	ldi	r30, 0x3A	; 58
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	80 e1       	ldi	r24, 0x10	; 16
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <KeyPad_getPressedKey+0x22>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	2a 95       	dec	r18
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <KeyPad_getPressedKey+0x1e>
     e28:	80 83       	st	Z, r24

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     e2a:	eb e3       	ldi	r30, 0x3B	; 59
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	80 e1       	ldi	r24, 0x10	; 16
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <KeyPad_getPressedKey+0x3e>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <KeyPad_getPressedKey+0x3a>
     e44:	80 95       	com	r24
     e46:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     e48:	19 82       	std	Y+1, r1	; 0x01
     e4a:	28 c0       	rjmp	.+80     	; 0xe9c <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
     e4c:	e9 e3       	ldi	r30, 0x39	; 57
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a9 01       	movw	r20, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <KeyPad_getPressedKey+0x62>
     e60:	55 95       	asr	r21
     e62:	47 95       	ror	r20
     e64:	8a 95       	dec	r24
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <KeyPad_getPressedKey+0x5e>
     e68:	ca 01       	movw	r24, r20
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	90 70       	andi	r25, 0x00	; 0
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	91 f4       	brne	.+36     	; 0xe96 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	98 2f       	mov	r25, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	89 0f       	add	r24, r25
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	0e 94 59 07 	call	0xeb2	; 0xeb2 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	a8 f2       	brcs	.-86     	; 0xe4c <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	8a 83       	std	Y+2, r24	; 0x02
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	08 f4       	brcc	.+2      	; 0xeb0 <KeyPad_getPressedKey+0xae>
     eae:	b0 cf       	rjmp	.-160    	; 0xe10 <KeyPad_getPressedKey+0xe>
     eb0:	ad cf       	rjmp	.-166    	; 0xe0c <KeyPad_getPressedKey+0xa>

00000eb2 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <KeyPad_4x4_adjustKeyNumber+0x6>
     eb8:	00 d0       	rcall	.+0      	; 0xeba <KeyPad_4x4_adjustKeyNumber+0x8>
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3c 83       	std	Y+4, r19	; 0x04
     ec8:	2b 83       	std	Y+3, r18	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	88 30       	cpi	r24, 0x08	; 8
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <KeyPad_4x4_adjustKeyNumber+0x24>
     ed4:	70 c0       	rjmp	.+224    	; 0xfb6 <KeyPad_4x4_adjustKeyNumber+0x104>
     ed6:	2b 81       	ldd	r18, Y+3	; 0x03
     ed8:	3c 81       	ldd	r19, Y+4	; 0x04
     eda:	29 30       	cpi	r18, 0x09	; 9
     edc:	31 05       	cpc	r19, r1
     ede:	5c f5       	brge	.+86     	; 0xf36 <KeyPad_4x4_adjustKeyNumber+0x84>
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <KeyPad_4x4_adjustKeyNumber+0x3a>
     eea:	59 c0       	rjmp	.+178    	; 0xf9e <KeyPad_4x4_adjustKeyNumber+0xec>
     eec:	2b 81       	ldd	r18, Y+3	; 0x03
     eee:	3c 81       	ldd	r19, Y+4	; 0x04
     ef0:	25 30       	cpi	r18, 0x05	; 5
     ef2:	31 05       	cpc	r19, r1
     ef4:	9c f4       	brge	.+38     	; 0xf1c <KeyPad_4x4_adjustKeyNumber+0x6a>
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	91 05       	cpc	r25, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <KeyPad_4x4_adjustKeyNumber+0x50>
     f00:	48 c0       	rjmp	.+144    	; 0xf92 <KeyPad_4x4_adjustKeyNumber+0xe0>
     f02:	2b 81       	ldd	r18, Y+3	; 0x03
     f04:	3c 81       	ldd	r19, Y+4	; 0x04
     f06:	23 30       	cpi	r18, 0x03	; 3
     f08:	31 05       	cpc	r19, r1
     f0a:	0c f0       	brlt	.+2      	; 0xf0e <KeyPad_4x4_adjustKeyNumber+0x5c>
     f0c:	45 c0       	rjmp	.+138    	; 0xf98 <KeyPad_4x4_adjustKeyNumber+0xe6>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <KeyPad_4x4_adjustKeyNumber+0x68>
     f18:	39 c0       	rjmp	.+114    	; 0xf8c <KeyPad_4x4_adjustKeyNumber+0xda>
     f1a:	67 c0       	rjmp	.+206    	; 0xfea <KeyPad_4x4_adjustKeyNumber+0x138>
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	26 30       	cpi	r18, 0x06	; 6
     f22:	31 05       	cpc	r19, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <KeyPad_4x4_adjustKeyNumber+0x76>
     f26:	41 c0       	rjmp	.+130    	; 0xfaa <KeyPad_4x4_adjustKeyNumber+0xf8>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	87 30       	cpi	r24, 0x07	; 7
     f2e:	91 05       	cpc	r25, r1
     f30:	0c f0       	brlt	.+2      	; 0xf34 <KeyPad_4x4_adjustKeyNumber+0x82>
     f32:	3e c0       	rjmp	.+124    	; 0xfb0 <KeyPad_4x4_adjustKeyNumber+0xfe>
     f34:	37 c0       	rjmp	.+110    	; 0xfa4 <KeyPad_4x4_adjustKeyNumber+0xf2>
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	3c 81       	ldd	r19, Y+4	; 0x04
     f3a:	2c 30       	cpi	r18, 0x0C	; 12
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <KeyPad_4x4_adjustKeyNumber+0x90>
     f40:	46 c0       	rjmp	.+140    	; 0xfce <KeyPad_4x4_adjustKeyNumber+0x11c>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	8d 30       	cpi	r24, 0x0D	; 13
     f48:	91 05       	cpc	r25, r1
     f4a:	5c f4       	brge	.+22     	; 0xf62 <KeyPad_4x4_adjustKeyNumber+0xb0>
     f4c:	2b 81       	ldd	r18, Y+3	; 0x03
     f4e:	3c 81       	ldd	r19, Y+4	; 0x04
     f50:	2a 30       	cpi	r18, 0x0A	; 10
     f52:	31 05       	cpc	r19, r1
     f54:	b1 f1       	breq	.+108    	; 0xfc2 <KeyPad_4x4_adjustKeyNumber+0x110>
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	8b 30       	cpi	r24, 0x0B	; 11
     f5c:	91 05       	cpc	r25, r1
     f5e:	a4 f5       	brge	.+104    	; 0xfc8 <KeyPad_4x4_adjustKeyNumber+0x116>
     f60:	2d c0       	rjmp	.+90     	; 0xfbc <KeyPad_4x4_adjustKeyNumber+0x10a>
     f62:	2b 81       	ldd	r18, Y+3	; 0x03
     f64:	3c 81       	ldd	r19, Y+4	; 0x04
     f66:	2e 30       	cpi	r18, 0x0E	; 14
     f68:	31 05       	cpc	r19, r1
     f6a:	b9 f1       	breq	.+110    	; 0xfda <KeyPad_4x4_adjustKeyNumber+0x128>
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	8e 30       	cpi	r24, 0x0E	; 14
     f72:	91 05       	cpc	r25, r1
     f74:	7c f1       	brlt	.+94     	; 0xfd4 <KeyPad_4x4_adjustKeyNumber+0x122>
     f76:	2b 81       	ldd	r18, Y+3	; 0x03
     f78:	3c 81       	ldd	r19, Y+4	; 0x04
     f7a:	2f 30       	cpi	r18, 0x0F	; 15
     f7c:	31 05       	cpc	r19, r1
     f7e:	79 f1       	breq	.+94     	; 0xfde <KeyPad_4x4_adjustKeyNumber+0x12c>
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	80 31       	cpi	r24, 0x10	; 16
     f86:	91 05       	cpc	r25, r1
     f88:	69 f1       	breq	.+90     	; 0xfe4 <KeyPad_4x4_adjustKeyNumber+0x132>
     f8a:	2f c0       	rjmp	.+94     	; 0xfea <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	2e c0       	rjmp	.+92     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
     f92:	28 e0       	ldi	r18, 0x08	; 8
     f94:	2a 83       	std	Y+2, r18	; 0x02
     f96:	2b c0       	rjmp	.+86     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
     f98:	39 e0       	ldi	r19, 0x09	; 9
     f9a:	3a 83       	std	Y+2, r19	; 0x02
     f9c:	28 c0       	rjmp	.+80     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     f9e:	85 e2       	ldi	r24, 0x25	; 37
     fa0:	8a 83       	std	Y+2, r24	; 0x02
     fa2:	25 c0       	rjmp	.+74     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	22 c0       	rjmp	.+68     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     faa:	25 e0       	ldi	r18, 0x05	; 5
     fac:	2a 83       	std	Y+2, r18	; 0x02
     fae:	1f c0       	rjmp	.+62     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
     fb0:	36 e0       	ldi	r19, 0x06	; 6
     fb2:	3a 83       	std	Y+2, r19	; 0x02
     fb4:	1c c0       	rjmp	.+56     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     fb6:	8a e2       	ldi	r24, 0x2A	; 42
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	19 c0       	rjmp	.+50     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
     fc2:	22 e0       	ldi	r18, 0x02	; 2
     fc4:	2a 83       	std	Y+2, r18	; 0x02
     fc6:	13 c0       	rjmp	.+38     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
     fc8:	33 e0       	ldi	r19, 0x03	; 3
     fca:	3a 83       	std	Y+2, r19	; 0x02
     fcc:	10 c0       	rjmp	.+32     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     fce:	8d e2       	ldi	r24, 0x2D	; 45
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	0d c0       	rjmp	.+26     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     fd4:	9d e0       	ldi	r25, 0x0D	; 13
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	0a c0       	rjmp	.+20     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
     fda:	1a 82       	std	Y+2, r1	; 0x02
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     fde:	2d e3       	ldi	r18, 0x3D	; 61
     fe0:	2a 83       	std	Y+2, r18	; 0x02
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     fe4:	3b e2       	ldi	r19, 0x2B	; 43
     fe6:	3a 83       	std	Y+2, r19	; 0x02
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<< RS) | (1<<RW) | (1<<E); /*Configure E,RW,RS as output pins*/
    1006:	a1 e3       	ldi	r26, 0x31	; 49
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e1 e3       	ldi	r30, 0x31	; 49
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 67       	ori	r24, 0x70	; 112
    1012:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the first 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode*/
	#else
		LCD_DATA_PORT_DIR = 0xFF; /*Define data port as output port*/
    1014:	e4 e3       	ldi	r30, 0x34	; 52
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);/*Use 2-line lcd + 8-bit Data Mode*/
    101c:	88 e3       	ldi	r24, 0x38	; 56
    101e:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCD_sendCommand>
	#endif
	LCD_sendCommand(CURSOR_OFF); /*Cursor off*/
    1022:	8c e0       	ldi	r24, 0x0C	; 12
    1024:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /*Clear LCD at the beginning*/
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCD_sendCommand>
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <LCD_sendCommand>:

/*Function responsible for sending commands to LCD*/
void LCD_sendCommand(uint8 command)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	e9 97       	sbiw	r28, 0x39	; 57
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /*Reset=0 as it is command*/
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 7e       	andi	r24, 0xEF	; 239
    1056:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /*R/W=0 as we write on LCD*/
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7d       	andi	r24, 0xDF	; 223
    1064:	8c 93       	st	X, r24
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a0 e8       	ldi	r26, 0x80	; 128
    106c:	bf e3       	ldi	r27, 0x3F	; 63
    106e:	8d ab       	std	Y+53, r24	; 0x35
    1070:	9e ab       	std	Y+54, r25	; 0x36
    1072:	af ab       	std	Y+55, r26	; 0x37
    1074:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1076:	6d a9       	ldd	r22, Y+53	; 0x35
    1078:	7e a9       	ldd	r23, Y+54	; 0x36
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	4a e7       	ldi	r20, 0x7A	; 122
    1084:	53 e4       	ldi	r21, 0x43	; 67
    1086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	89 ab       	std	Y+49, r24	; 0x31
    1090:	9a ab       	std	Y+50, r25	; 0x32
    1092:	ab ab       	std	Y+51, r26	; 0x33
    1094:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1096:	69 a9       	ldd	r22, Y+49	; 0x31
    1098:	7a a9       	ldd	r23, Y+50	; 0x32
    109a:	8b a9       	ldd	r24, Y+51	; 0x33
    109c:	9c a9       	ldd	r25, Y+52	; 0x34
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <LCD_sendCommand+0x84>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	98 ab       	std	Y+48, r25	; 0x30
    10b4:	8f a7       	std	Y+47, r24	; 0x2f
    10b6:	3f c0       	rjmp	.+126    	; 0x1136 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    10b8:	69 a9       	ldd	r22, Y+49	; 0x31
    10ba:	7a a9       	ldd	r23, Y+50	; 0x32
    10bc:	8b a9       	ldd	r24, Y+51	; 0x33
    10be:	9c a9       	ldd	r25, Y+52	; 0x34
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	4c f5       	brge	.+82     	; 0x1122 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d0:	6d a9       	ldd	r22, Y+53	; 0x35
    10d2:	7e a9       	ldd	r23, Y+54	; 0x36
    10d4:	8f a9       	ldd	r24, Y+55	; 0x37
    10d6:	98 ad       	ldd	r25, Y+56	; 0x38
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e2       	ldi	r20, 0x20	; 32
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	98 ab       	std	Y+48, r25	; 0x30
    10f6:	8f a7       	std	Y+47, r24	; 0x2f
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <LCD_sendCommand+0xe4>
    10fa:	89 e1       	ldi	r24, 0x19	; 25
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9e a7       	std	Y+46, r25	; 0x2e
    1100:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1102:	8d a5       	ldd	r24, Y+45	; 0x2d
    1104:	9e a5       	ldd	r25, Y+46	; 0x2e
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <LCD_sendCommand+0xd2>
    110a:	9e a7       	std	Y+46, r25	; 0x2e
    110c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1110:	98 a9       	ldd	r25, Y+48	; 0x30
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	98 ab       	std	Y+48, r25	; 0x30
    1116:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1118:	8f a5       	ldd	r24, Y+47	; 0x2f
    111a:	98 a9       	ldd	r25, Y+48	; 0x30
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	69 f7       	brne	.-38     	; 0x10fa <LCD_sendCommand+0xc6>
    1120:	14 c0       	rjmp	.+40     	; 0x114a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1122:	69 a9       	ldd	r22, Y+49	; 0x31
    1124:	7a a9       	ldd	r23, Y+50	; 0x32
    1126:	8b a9       	ldd	r24, Y+51	; 0x33
    1128:	9c a9       	ldd	r25, Y+52	; 0x34
    112a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	98 ab       	std	Y+48, r25	; 0x30
    1134:	8f a7       	std	Y+47, r24	; 0x2f
    1136:	8f a5       	ldd	r24, Y+47	; 0x2f
    1138:	98 a9       	ldd	r25, Y+48	; 0x30
    113a:	9c a7       	std	Y+44, r25	; 0x2c
    113c:	8b a7       	std	Y+43, r24	; 0x2b
    113e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1140:	9c a5       	ldd	r25, Y+44	; 0x2c
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <LCD_sendCommand+0x10e>
    1146:	9c a7       	std	Y+44, r25	; 0x2c
    1148:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /*Delay for Tas = 50 ns*/
	SET_BIT(LCD_CTRL_PORT,E); /*E=1 to enable the LCD display*/
    114a:	a2 e3       	ldi	r26, 0x32	; 50
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 64       	ori	r24, 0x40	; 64
    1156:	8c 93       	st	X, r24
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e8       	ldi	r26, 0x80	; 128
    115e:	bf e3       	ldi	r27, 0x3F	; 63
    1160:	8f a3       	std	Y+39, r24	; 0x27
    1162:	98 a7       	std	Y+40, r25	; 0x28
    1164:	a9 a7       	std	Y+41, r26	; 0x29
    1166:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	6f a1       	ldd	r22, Y+39	; 0x27
    116a:	78 a5       	ldd	r23, Y+40	; 0x28
    116c:	89 a5       	ldd	r24, Y+41	; 0x29
    116e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a e7       	ldi	r20, 0x7A	; 122
    1176:	53 e4       	ldi	r21, 0x43	; 67
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8b a3       	std	Y+35, r24	; 0x23
    1182:	9c a3       	std	Y+36, r25	; 0x24
    1184:	ad a3       	std	Y+37, r26	; 0x25
    1186:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1188:	6b a1       	ldd	r22, Y+35	; 0x23
    118a:	7c a1       	ldd	r23, Y+36	; 0x24
    118c:	8d a1       	ldd	r24, Y+37	; 0x25
    118e:	9e a1       	ldd	r25, Y+38	; 0x26
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <LCD_sendCommand+0x176>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9a a3       	std	Y+34, r25	; 0x22
    11a6:	89 a3       	std	Y+33, r24	; 0x21
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    11aa:	6b a1       	ldd	r22, Y+35	; 0x23
    11ac:	7c a1       	ldd	r23, Y+36	; 0x24
    11ae:	8d a1       	ldd	r24, Y+37	; 0x25
    11b0:	9e a1       	ldd	r25, Y+38	; 0x26
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	6f a1       	ldd	r22, Y+39	; 0x27
    11c4:	78 a5       	ldd	r23, Y+40	; 0x28
    11c6:	89 a5       	ldd	r24, Y+41	; 0x29
    11c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9a a3       	std	Y+34, r25	; 0x22
    11e8:	89 a3       	std	Y+33, r24	; 0x21
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <LCD_sendCommand+0x1d6>
    11ec:	89 e1       	ldi	r24, 0x19	; 25
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	98 a3       	std	Y+32, r25	; 0x20
    11f2:	8f 8f       	std	Y+31, r24	; 0x1f
    11f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11f6:	98 a1       	ldd	r25, Y+32	; 0x20
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <LCD_sendCommand+0x1c4>
    11fc:	98 a3       	std	Y+32, r25	; 0x20
    11fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	89 a1       	ldd	r24, Y+33	; 0x21
    1202:	9a a1       	ldd	r25, Y+34	; 0x22
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9a a3       	std	Y+34, r25	; 0x22
    1208:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	89 a1       	ldd	r24, Y+33	; 0x21
    120c:	9a a1       	ldd	r25, Y+34	; 0x22
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	69 f7       	brne	.-38     	; 0x11ec <LCD_sendCommand+0x1b8>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9a a3       	std	Y+34, r25	; 0x22
    1226:	89 a3       	std	Y+33, r24	; 0x21
    1228:	89 a1       	ldd	r24, Y+33	; 0x21
    122a:	9a a1       	ldd	r25, Y+34	; 0x22
    122c:	9e 8f       	std	Y+30, r25	; 0x1e
    122e:	8d 8f       	std	Y+29, r24	; 0x1d
    1230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <LCD_sendCommand+0x200>
    1238:	9e 8f       	std	Y+30, r25	; 0x1e
    123a:	8d 8f       	std	Y+29, r24	; 0x1d
		#endif
		_delay_ms(1); /*Delay for Tdsw = 100 ns*/
		CLEAR_BIT(LCD_CTRL_PORT,E); /*E=0 to disable LCD*/
		_delay_ms(1); /*Delay for Th= 13ns*/
	#else
		LCD_DATA_PORT = command;
    123c:	e5 e3       	ldi	r30, 0x35	; 53
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	89 ad       	ldd	r24, Y+57	; 0x39
    1242:	80 83       	st	Z, r24
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a0 e8       	ldi	r26, 0x80	; 128
    124a:	bf e3       	ldi	r27, 0x3F	; 63
    124c:	89 8f       	std	Y+25, r24	; 0x19
    124e:	9a 8f       	std	Y+26, r25	; 0x1a
    1250:	ab 8f       	std	Y+27, r26	; 0x1b
    1252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1254:	69 8d       	ldd	r22, Y+25	; 0x19
    1256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a e7       	ldi	r20, 0x7A	; 122
    1262:	53 e4       	ldi	r21, 0x43	; 67
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	8d 8b       	std	Y+21, r24	; 0x15
    126e:	9e 8b       	std	Y+22, r25	; 0x16
    1270:	af 8b       	std	Y+23, r26	; 0x17
    1272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1274:	6d 89       	ldd	r22, Y+21	; 0x15
    1276:	7e 89       	ldd	r23, Y+22	; 0x16
    1278:	8f 89       	ldd	r24, Y+23	; 0x17
    127a:	98 8d       	ldd	r25, Y+24	; 0x18
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <LCD_sendCommand+0x262>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9c 8b       	std	Y+20, r25	; 0x14
    1292:	8b 8b       	std	Y+19, r24	; 0x13
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1296:	6d 89       	ldd	r22, Y+21	; 0x15
    1298:	7e 89       	ldd	r23, Y+22	; 0x16
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	4c f5       	brge	.+82     	; 0x1300 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	69 8d       	ldd	r22, Y+25	; 0x19
    12b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9c 8b       	std	Y+20, r25	; 0x14
    12d4:	8b 8b       	std	Y+19, r24	; 0x13
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <LCD_sendCommand+0x2c2>
    12d8:	89 e1       	ldi	r24, 0x19	; 25
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9a 8b       	std	Y+18, r25	; 0x12
    12de:	89 8b       	std	Y+17, r24	; 0x11
    12e0:	89 89       	ldd	r24, Y+17	; 0x11
    12e2:	9a 89       	ldd	r25, Y+18	; 0x12
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <LCD_sendCommand+0x2b0>
    12e8:	9a 8b       	std	Y+18, r25	; 0x12
    12ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	8b 89       	ldd	r24, Y+19	; 0x13
    12ee:	9c 89       	ldd	r25, Y+20	; 0x14
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	9c 8b       	std	Y+20, r25	; 0x14
    12f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	8b 89       	ldd	r24, Y+19	; 0x13
    12f8:	9c 89       	ldd	r25, Y+20	; 0x14
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <LCD_sendCommand+0x2a4>
    12fe:	14 c0       	rjmp	.+40     	; 0x1328 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1300:	6d 89       	ldd	r22, Y+21	; 0x15
    1302:	7e 89       	ldd	r23, Y+22	; 0x16
    1304:	8f 89       	ldd	r24, Y+23	; 0x17
    1306:	98 8d       	ldd	r25, Y+24	; 0x18
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9c 8b       	std	Y+20, r25	; 0x14
    1312:	8b 8b       	std	Y+19, r24	; 0x13
    1314:	8b 89       	ldd	r24, Y+19	; 0x13
    1316:	9c 89       	ldd	r25, Y+20	; 0x14
    1318:	98 8b       	std	Y+16, r25	; 0x10
    131a:	8f 87       	std	Y+15, r24	; 0x0f
    131c:	8f 85       	ldd	r24, Y+15	; 0x0f
    131e:	98 89       	ldd	r25, Y+16	; 0x10
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <LCD_sendCommand+0x2ec>
    1324:	98 8b       	std	Y+16, r25	; 0x10
    1326:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /*Delay for Tdsw = 100 ns*/
		CLEAR_BIT(LCD_CTRL_PORT,E); /*E=0 to disable LCD*/
    1328:	a2 e3       	ldi	r26, 0x32	; 50
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7b       	andi	r24, 0xBF	; 191
    1334:	8c 93       	st	X, r24
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e8       	ldi	r26, 0x80	; 128
    133c:	bf e3       	ldi	r27, 0x3F	; 63
    133e:	8b 87       	std	Y+11, r24	; 0x0b
    1340:	9c 87       	std	Y+12, r25	; 0x0c
    1342:	ad 87       	std	Y+13, r26	; 0x0d
    1344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6b 85       	ldd	r22, Y+11	; 0x0b
    1348:	7c 85       	ldd	r23, Y+12	; 0x0c
    134a:	8d 85       	ldd	r24, Y+13	; 0x0d
    134c:	9e 85       	ldd	r25, Y+14	; 0x0e
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a e7       	ldi	r20, 0x7A	; 122
    1354:	53 e4       	ldi	r21, 0x43	; 67
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8f 83       	std	Y+7, r24	; 0x07
    1360:	98 87       	std	Y+8, r25	; 0x08
    1362:	a9 87       	std	Y+9, r26	; 0x09
    1364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1366:	6f 81       	ldd	r22, Y+7	; 0x07
    1368:	78 85       	ldd	r23, Y+8	; 0x08
    136a:	89 85       	ldd	r24, Y+9	; 0x09
    136c:	9a 85       	ldd	r25, Y+10	; 0x0a
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <LCD_sendCommand+0x354>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1388:	6f 81       	ldd	r22, Y+7	; 0x07
    138a:	78 85       	ldd	r23, Y+8	; 0x08
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <LCD_sendCommand+0x3b4>
    13ca:	89 e1       	ldi	r24, 0x19	; 25
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	8b 83       	std	Y+3, r24	; 0x03
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <LCD_sendCommand+0x3a2>
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <LCD_sendCommand+0x396>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <LCD_sendCommand+0x3de>
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /*Delay for Th= 13ns*/
	#endif
}
    141a:	e9 96       	adiw	r28, 0x39	; 57
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <LCD_displayCharacter>:

/*Function responsible for displaying the required char data*/
void LCD_displayCharacter(uint8 data)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	e9 97       	sbiw	r28, 0x39	; 57
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /*Reset=1 as it is data*/
    1442:	a2 e3       	ldi	r26, 0x32	; 50
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e2 e3       	ldi	r30, 0x32	; 50
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 61       	ori	r24, 0x10	; 16
    144e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /*R/W=0 as we write on LCD*/
    1450:	a2 e3       	ldi	r26, 0x32	; 50
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8f 7d       	andi	r24, 0xDF	; 223
    145c:	8c 93       	st	X, r24
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a0 e8       	ldi	r26, 0x80	; 128
    1464:	bf e3       	ldi	r27, 0x3F	; 63
    1466:	8d ab       	std	Y+53, r24	; 0x35
    1468:	9e ab       	std	Y+54, r25	; 0x36
    146a:	af ab       	std	Y+55, r26	; 0x37
    146c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146e:	6d a9       	ldd	r22, Y+53	; 0x35
    1470:	7e a9       	ldd	r23, Y+54	; 0x36
    1472:	8f a9       	ldd	r24, Y+55	; 0x37
    1474:	98 ad       	ldd	r25, Y+56	; 0x38
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4a e7       	ldi	r20, 0x7A	; 122
    147c:	53 e4       	ldi	r21, 0x43	; 67
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	89 ab       	std	Y+49, r24	; 0x31
    1488:	9a ab       	std	Y+50, r25	; 0x32
    148a:	ab ab       	std	Y+51, r26	; 0x33
    148c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    148e:	69 a9       	ldd	r22, Y+49	; 0x31
    1490:	7a a9       	ldd	r23, Y+50	; 0x32
    1492:	8b a9       	ldd	r24, Y+51	; 0x33
    1494:	9c a9       	ldd	r25, Y+52	; 0x34
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <LCD_displayCharacter+0x84>
		__ticks = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	98 ab       	std	Y+48, r25	; 0x30
    14ac:	8f a7       	std	Y+47, r24	; 0x2f
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    14b0:	69 a9       	ldd	r22, Y+49	; 0x31
    14b2:	7a a9       	ldd	r23, Y+50	; 0x32
    14b4:	8b a9       	ldd	r24, Y+51	; 0x33
    14b6:	9c a9       	ldd	r25, Y+52	; 0x34
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	57 e4       	ldi	r21, 0x47	; 71
    14c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	4c f5       	brge	.+82     	; 0x151a <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c8:	6d a9       	ldd	r22, Y+53	; 0x35
    14ca:	7e a9       	ldd	r23, Y+54	; 0x36
    14cc:	8f a9       	ldd	r24, Y+55	; 0x37
    14ce:	98 ad       	ldd	r25, Y+56	; 0x38
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e2       	ldi	r20, 0x20	; 32
    14d6:	51 e4       	ldi	r21, 0x41	; 65
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	98 ab       	std	Y+48, r25	; 0x30
    14ee:	8f a7       	std	Y+47, r24	; 0x2f
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <LCD_displayCharacter+0xe4>
    14f2:	89 e1       	ldi	r24, 0x19	; 25
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e a7       	std	Y+46, r25	; 0x2e
    14f8:	8d a7       	std	Y+45, r24	; 0x2d
    14fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    14fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_displayCharacter+0xd2>
    1502:	9e a7       	std	Y+46, r25	; 0x2e
    1504:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1506:	8f a5       	ldd	r24, Y+47	; 0x2f
    1508:	98 a9       	ldd	r25, Y+48	; 0x30
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	98 ab       	std	Y+48, r25	; 0x30
    150e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1510:	8f a5       	ldd	r24, Y+47	; 0x2f
    1512:	98 a9       	ldd	r25, Y+48	; 0x30
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f7       	brne	.-38     	; 0x14f2 <LCD_displayCharacter+0xc6>
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151a:	69 a9       	ldd	r22, Y+49	; 0x31
    151c:	7a a9       	ldd	r23, Y+50	; 0x32
    151e:	8b a9       	ldd	r24, Y+51	; 0x33
    1520:	9c a9       	ldd	r25, Y+52	; 0x34
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	8f a7       	std	Y+47, r24	; 0x2f
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	98 a9       	ldd	r25, Y+48	; 0x30
    1532:	9c a7       	std	Y+44, r25	; 0x2c
    1534:	8b a7       	std	Y+43, r24	; 0x2b
    1536:	8b a5       	ldd	r24, Y+43	; 0x2b
    1538:	9c a5       	ldd	r25, Y+44	; 0x2c
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_displayCharacter+0x10e>
    153e:	9c a7       	std	Y+44, r25	; 0x2c
    1540:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /*Delay for Tas = 50 ns*/
	SET_BIT(LCD_CTRL_PORT,E); /*E=1 to enable the LCD display*/
    1542:	a2 e3       	ldi	r26, 0x32	; 50
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 64       	ori	r24, 0x40	; 64
    154e:	8c 93       	st	X, r24
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e8       	ldi	r26, 0x80	; 128
    1556:	bf e3       	ldi	r27, 0x3F	; 63
    1558:	8f a3       	std	Y+39, r24	; 0x27
    155a:	98 a7       	std	Y+40, r25	; 0x28
    155c:	a9 a7       	std	Y+41, r26	; 0x29
    155e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	6f a1       	ldd	r22, Y+39	; 0x27
    1562:	78 a5       	ldd	r23, Y+40	; 0x28
    1564:	89 a5       	ldd	r24, Y+41	; 0x29
    1566:	9a a5       	ldd	r25, Y+42	; 0x2a
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a e7       	ldi	r20, 0x7A	; 122
    156e:	53 e4       	ldi	r21, 0x43	; 67
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8b a3       	std	Y+35, r24	; 0x23
    157a:	9c a3       	std	Y+36, r25	; 0x24
    157c:	ad a3       	std	Y+37, r26	; 0x25
    157e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1580:	6b a1       	ldd	r22, Y+35	; 0x23
    1582:	7c a1       	ldd	r23, Y+36	; 0x24
    1584:	8d a1       	ldd	r24, Y+37	; 0x25
    1586:	9e a1       	ldd	r25, Y+38	; 0x26
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e8       	ldi	r20, 0x80	; 128
    158e:	5f e3       	ldi	r21, 0x3F	; 63
    1590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1594:	88 23       	and	r24, r24
    1596:	2c f4       	brge	.+10     	; 0x15a2 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9a a3       	std	Y+34, r25	; 0x22
    159e:	89 a3       	std	Y+33, r24	; 0x21
    15a0:	3f c0       	rjmp	.+126    	; 0x1620 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    15a2:	6b a1       	ldd	r22, Y+35	; 0x23
    15a4:	7c a1       	ldd	r23, Y+36	; 0x24
    15a6:	8d a1       	ldd	r24, Y+37	; 0x25
    15a8:	9e a1       	ldd	r25, Y+38	; 0x26
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	3f ef       	ldi	r19, 0xFF	; 255
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	57 e4       	ldi	r21, 0x47	; 71
    15b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	4c f5       	brge	.+82     	; 0x160c <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	6f a1       	ldd	r22, Y+39	; 0x27
    15bc:	78 a5       	ldd	r23, Y+40	; 0x28
    15be:	89 a5       	ldd	r24, Y+41	; 0x29
    15c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9a a3       	std	Y+34, r25	; 0x22
    15e0:	89 a3       	std	Y+33, r24	; 0x21
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <LCD_displayCharacter+0x1d6>
    15e4:	89 e1       	ldi	r24, 0x19	; 25
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	98 a3       	std	Y+32, r25	; 0x20
    15ea:	8f 8f       	std	Y+31, r24	; 0x1f
    15ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ee:	98 a1       	ldd	r25, Y+32	; 0x20
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_displayCharacter+0x1c4>
    15f4:	98 a3       	std	Y+32, r25	; 0x20
    15f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	89 a1       	ldd	r24, Y+33	; 0x21
    15fa:	9a a1       	ldd	r25, Y+34	; 0x22
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9a a3       	std	Y+34, r25	; 0x22
    1600:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	89 a1       	ldd	r24, Y+33	; 0x21
    1604:	9a a1       	ldd	r25, Y+34	; 0x22
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f7       	brne	.-38     	; 0x15e4 <LCD_displayCharacter+0x1b8>
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	6b a1       	ldd	r22, Y+35	; 0x23
    160e:	7c a1       	ldd	r23, Y+36	; 0x24
    1610:	8d a1       	ldd	r24, Y+37	; 0x25
    1612:	9e a1       	ldd	r25, Y+38	; 0x26
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9a a3       	std	Y+34, r25	; 0x22
    161e:	89 a3       	std	Y+33, r24	; 0x21
    1620:	89 a1       	ldd	r24, Y+33	; 0x21
    1622:	9a a1       	ldd	r25, Y+34	; 0x22
    1624:	9e 8f       	std	Y+30, r25	; 0x1e
    1626:	8d 8f       	std	Y+29, r24	; 0x1d
    1628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_displayCharacter+0x200>
    1630:	9e 8f       	std	Y+30, r25	; 0x1e
    1632:	8d 8f       	std	Y+29, r24	; 0x1d
		#endif
		_delay_ms(1); /*Delay for Tdsw = 100 ns*/
		CLEAR_BIT(LCD_CTRL_PORT,E); /*E=0 to disable LCD*/
		_delay_ms(1); /*Delay for Th= 13ns*/
	#else
		LCD_DATA_PORT = data;
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	89 ad       	ldd	r24, Y+57	; 0x39
    163a:	80 83       	st	Z, r24
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e8       	ldi	r26, 0x80	; 128
    1642:	bf e3       	ldi	r27, 0x3F	; 63
    1644:	89 8f       	std	Y+25, r24	; 0x19
    1646:	9a 8f       	std	Y+26, r25	; 0x1a
    1648:	ab 8f       	std	Y+27, r26	; 0x1b
    164a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	69 8d       	ldd	r22, Y+25	; 0x19
    164e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a e7       	ldi	r20, 0x7A	; 122
    165a:	53 e4       	ldi	r21, 0x43	; 67
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8d 8b       	std	Y+21, r24	; 0x15
    1666:	9e 8b       	std	Y+22, r25	; 0x16
    1668:	af 8b       	std	Y+23, r26	; 0x17
    166a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    166c:	6d 89       	ldd	r22, Y+21	; 0x15
    166e:	7e 89       	ldd	r23, Y+22	; 0x16
    1670:	8f 89       	ldd	r24, Y+23	; 0x17
    1672:	98 8d       	ldd	r25, Y+24	; 0x18
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9c 8b       	std	Y+20, r25	; 0x14
    168a:	8b 8b       	std	Y+19, r24	; 0x13
    168c:	3f c0       	rjmp	.+126    	; 0x170c <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    168e:	6d 89       	ldd	r22, Y+21	; 0x15
    1690:	7e 89       	ldd	r23, Y+22	; 0x16
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	69 8d       	ldd	r22, Y+25	; 0x19
    16a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9c 8b       	std	Y+20, r25	; 0x14
    16cc:	8b 8b       	std	Y+19, r24	; 0x13
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <LCD_displayCharacter+0x2c2>
    16d0:	89 e1       	ldi	r24, 0x19	; 25
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9a 8b       	std	Y+18, r25	; 0x12
    16d6:	89 8b       	std	Y+17, r24	; 0x11
    16d8:	89 89       	ldd	r24, Y+17	; 0x11
    16da:	9a 89       	ldd	r25, Y+18	; 0x12
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_displayCharacter+0x2b0>
    16e0:	9a 8b       	std	Y+18, r25	; 0x12
    16e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	9c 89       	ldd	r25, Y+20	; 0x14
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9c 8b       	std	Y+20, r25	; 0x14
    16ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8b 89       	ldd	r24, Y+19	; 0x13
    16f0:	9c 89       	ldd	r25, Y+20	; 0x14
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <LCD_displayCharacter+0x2a4>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6d 89       	ldd	r22, Y+21	; 0x15
    16fa:	7e 89       	ldd	r23, Y+22	; 0x16
    16fc:	8f 89       	ldd	r24, Y+23	; 0x17
    16fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	98 8b       	std	Y+16, r25	; 0x10
    1712:	8f 87       	std	Y+15, r24	; 0x0f
    1714:	8f 85       	ldd	r24, Y+15	; 0x0f
    1716:	98 89       	ldd	r25, Y+16	; 0x10
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_displayCharacter+0x2ec>
    171c:	98 8b       	std	Y+16, r25	; 0x10
    171e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /*Delay for Tdsw = 100 ns*/
		CLEAR_BIT(LCD_CTRL_PORT,E); /*E=0 to disable LCD*/
    1720:	a2 e3       	ldi	r26, 0x32	; 50
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e2 e3       	ldi	r30, 0x32	; 50
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 7b       	andi	r24, 0xBF	; 191
    172c:	8c 93       	st	X, r24
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e8       	ldi	r26, 0x80	; 128
    1734:	bf e3       	ldi	r27, 0x3F	; 63
    1736:	8b 87       	std	Y+11, r24	; 0x0b
    1738:	9c 87       	std	Y+12, r25	; 0x0c
    173a:	ad 87       	std	Y+13, r26	; 0x0d
    173c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1740:	7c 85       	ldd	r23, Y+12	; 0x0c
    1742:	8d 85       	ldd	r24, Y+13	; 0x0d
    1744:	9e 85       	ldd	r25, Y+14	; 0x0e
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a e7       	ldi	r20, 0x7A	; 122
    174c:	53 e4       	ldi	r21, 0x43	; 67
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8f 83       	std	Y+7, r24	; 0x07
    1758:	98 87       	std	Y+8, r25	; 0x08
    175a:	a9 87       	std	Y+9, r26	; 0x09
    175c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <LCD_displayCharacter+0x3b4>
    17c2:	89 e1       	ldi	r24, 0x19	; 25
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <LCD_displayCharacter+0x3a2>
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <LCD_displayCharacter+0x396>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_displayCharacter+0x3de>
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /*Delay for Th= 13ns*/
	#endif
}
    1812:	e9 96       	adiw	r28, 0x39	; 57
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_displayString>:

/*Function responsible for displaying the required string*/
void LCD_displayString(const char *Str)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <LCD_displayString+0x6>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	0a c0       	rjmp	.+20     	; 0x1848 <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	80 81       	ld	r24, Z
    183a:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_displayCharacter>
		Str++;
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
}

/*Function responsible for displaying the required string*/
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	80 81       	ld	r24, Z
    184e:	88 23       	and	r24, r24
    1850:	89 f7       	brne	.-30     	; 0x1834 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <LCD_goToRowColumn>:

/*Function responsible for moving the cursor of the LCD
 * to the required row and column (address)
 */
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <LCD_goToRowColumn+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <LCD_goToRowColumn+0x8>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	8a 83       	std	Y+2, r24	; 0x02
    186c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3d 83       	std	Y+5, r19	; 0x05
    1876:	2c 83       	std	Y+4, r18	; 0x04
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	c1 f0       	breq	.+48     	; 0x18b2 <LCD_goToRowColumn+0x56>
    1882:	2c 81       	ldd	r18, Y+4	; 0x04
    1884:	3d 81       	ldd	r19, Y+5	; 0x05
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_goToRowColumn+0x3a>
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	61 f0       	breq	.+24     	; 0x18ac <LCD_goToRowColumn+0x50>
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <LCD_goToRowColumn+0x6c>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	69 f0       	breq	.+26     	; 0x18ba <LCD_goToRowColumn+0x5e>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <LCD_goToRowColumn+0x66>
    18aa:	0e c0       	rjmp	.+28     	; 0x18c8 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				address=col;
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	0b c0       	rjmp	.+22     	; 0x18c8 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				address=col+0x40;
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	80 5c       	subi	r24, 0xC0	; 192
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				address=col+0x10;
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	80 5f       	subi	r24, 0xF0	; 240
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				address=col+0x50;
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	80 5b       	subi	r24, 0xB0	; 176
    18c6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(SET_CURSOR_LOCATION | address);
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCD_sendCommand>
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <LCD_displayStringRowColumn>:

/*Function responsible for displaying the required string at the required address on LCD*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <LCD_displayStringRowColumn+0x6>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <LCD_displayStringRowColumn+0x8>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6a 83       	std	Y+2, r22	; 0x02
    18f0:	5c 83       	std	Y+4, r21	; 0x04
    18f2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	6a 81       	ldd	r22, Y+2	; 0x02
    18f8:	0e 94 2e 0c 	call	0x185c	; 0x185c <LCD_goToRowColumn>
	LCD_displayString(Str);
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_displayString>
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <LCD_clearScreen>:

/*Function responsible for clearing the LCD*/
void LCD_clearScreen(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCD_sendCommand>
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <LCD_intgerToString>:

/*Function responsible for converting the given integer data into string and displaying it*/
void LCD_intgerToString(int data)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	62 97       	sbiw	r28, 0x12	; 18
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	9a 8b       	std	Y+18, r25	; 0x12
    193c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
    193e:	89 89       	ldd	r24, Y+17	; 0x11
    1940:	9a 89       	ldd	r25, Y+18	; 0x12
    1942:	9e 01       	movw	r18, r28
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	b9 01       	movw	r22, r18
    194a:	4a e0       	ldi	r20, 0x0A	; 10
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <itoa>
    LCD_displayString(buff);
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_displayString>
}
    195a:	62 96       	adiw	r28, 0x12	; 18
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <Cal_Time>:
#include "main.h"
void Cal_Time(void){
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1974:	80 91 0f 01 	lds	r24, 0x010F
    1978:	90 91 10 01 	lds	r25, 0x0110
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	90 93 10 01 	sts	0x0110, r25
    1982:	80 93 0f 01 	sts	0x010F, r24
	//according to the used prescalar every 30 tick=1 sec
	if (tick==30){
    1986:	80 91 0f 01 	lds	r24, 0x010F
    198a:	90 91 10 01 	lds	r25, 0x0110
    198e:	8e 31       	cpi	r24, 0x1E	; 30
    1990:	91 05       	cpc	r25, r1
    1992:	49 f4       	brne	.+18     	; 0x19a6 <Cal_Time+0x3a>
		Sec_Flag++;
    1994:	80 91 0d 01 	lds	r24, 0x010D
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	80 93 0d 01 	sts	0x010D, r24
		tick=0;
    199e:	10 92 10 01 	sts	0x0110, r1
    19a2:	10 92 0f 01 	sts	0x010F, r1
	}
}
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <First_Run>:

// in this function the user enters the password for 2 times,then MC1 sends it to MC2 to save it
void First_Run()
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	e8 97       	sbiw	r28, 0x38	; 56
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
	sint32 New_Pass = 0; //to save the entered new password
    19c0:	1d aa       	std	Y+53, r1	; 0x35
    19c2:	1e aa       	std	Y+54, r1	; 0x36
    19c4:	1f aa       	std	Y+55, r1	; 0x37
    19c6:	18 ae       	std	Y+56, r1	; 0x38
	sint32 Re_Pass = 0;  // to save the second try password
    19c8:	19 aa       	std	Y+49, r1	; 0x31
    19ca:	1a aa       	std	Y+50, r1	; 0x32
    19cc:	1b aa       	std	Y+51, r1	; 0x33
    19ce:	1c aa       	std	Y+52, r1	; 0x34
	uint16 key = 0;       //to save the pressed key from the keypad
    19d0:	18 aa       	std	Y+48, r1	; 0x30
    19d2:	1f a6       	std	Y+47, r1	; 0x2f
	uint16 pass=0;       //to save the password digit and send it to M2
    19d4:	1e a6       	std	Y+46, r1	; 0x2e
    19d6:	1d a6       	std	Y+45, r1	; 0x2d
	uint16 Count_Pass;  //to count entered password digits (5)

	LCD_clearScreen();
    19d8:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new pass:");
    19dc:	20 e6       	ldi	r18, 0x60	; 96
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	a9 01       	movw	r20, r18
    19e6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>

	for(Count_Pass=0; Count_Pass<5; Count_Pass++) //To take the 5 digits
    19ea:	1c a6       	std	Y+44, r1	; 0x2c
    19ec:	1b a6       	std	Y+43, r1	; 0x2b
    19ee:	ac c0       	rjmp	.+344    	; 0x1b48 <First_Run+0x19c>
	{
		key = KeyPad_getPressedKey();
    19f0:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	98 ab       	std	Y+48, r25	; 0x30
    19fa:	8f a7       	std	Y+47, r24	; 0x2f
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <First_Run+0x5e>
		while(!((key >= 0) && (key <= 9)))//check if it's a number from 0 to 9
		{
			key = KeyPad_getPressedKey();
    19fe:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	98 ab       	std	Y+48, r25	; 0x30
    1a08:	8f a7       	std	Y+47, r24	; 0x2f
	LCD_displayStringRowColumn(0,0,"Enter new pass:");

	for(Count_Pass=0; Count_Pass<5; Count_Pass++) //To take the 5 digits
	{
		key = KeyPad_getPressedKey();
		while(!((key >= 0) && (key <= 9)))//check if it's a number from 0 to 9
    1a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a0e:	8a 30       	cpi	r24, 0x0A	; 10
    1a10:	91 05       	cpc	r25, r1
    1a12:	a8 f7       	brcc	.-22     	; 0x19fe <First_Run+0x52>
		{
			key = KeyPad_getPressedKey();
		}
		LCD_displayStringRowColumn(1,Count_Pass,"*"); //Display Digit as *
    1a14:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a16:	20 e7       	ldi	r18, 0x70	; 112
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	69 2f       	mov	r22, r25
    1a1e:	a9 01       	movw	r20, r18
    1a20:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
		New_Pass= New_Pass*10 + key; //Save the 5 digits
    1a24:	8d a9       	ldd	r24, Y+53	; 0x35
    1a26:	9e a9       	ldd	r25, Y+54	; 0x36
    1a28:	af a9       	ldd	r26, Y+55	; 0x37
    1a2a:	b8 ad       	ldd	r27, Y+56	; 0x38
    1a2c:	2a e0       	ldi	r18, 0x0A	; 10
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__mulsi3>
    1a3c:	9b 01       	movw	r18, r22
    1a3e:	ac 01       	movw	r20, r24
    1a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a42:	98 a9       	ldd	r25, Y+48	; 0x30
    1a44:	cc 01       	movw	r24, r24
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	a4 1f       	adc	r26, r20
    1a50:	b5 1f       	adc	r27, r21
    1a52:	8d ab       	std	Y+53, r24	; 0x35
    1a54:	9e ab       	std	Y+54, r25	; 0x36
    1a56:	af ab       	std	Y+55, r26	; 0x37
    1a58:	b8 af       	std	Y+56, r27	; 0x38
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e8       	ldi	r25, 0x80	; 128
    1a5e:	a9 e0       	ldi	r26, 0x09	; 9
    1a60:	b5 e4       	ldi	r27, 0x45	; 69
    1a62:	8f a3       	std	Y+39, r24	; 0x27
    1a64:	98 a7       	std	Y+40, r25	; 0x28
    1a66:	a9 a7       	std	Y+41, r26	; 0x29
    1a68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a e7       	ldi	r20, 0x7A	; 122
    1a78:	53 e4       	ldi	r21, 0x43	; 67
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	8b a3       	std	Y+35, r24	; 0x23
    1a84:	9c a3       	std	Y+36, r25	; 0x24
    1a86:	ad a3       	std	Y+37, r26	; 0x25
    1a88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a90:	9e a1       	ldd	r25, Y+38	; 0x26
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <First_Run+0x100>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9a a3       	std	Y+34, r25	; 0x22
    1aa8:	89 a3       	std	Y+33, r24	; 0x21
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <First_Run+0x17e>
	else if (__tmp > 65535)
    1aac:	6b a1       	ldd	r22, Y+35	; 0x23
    1aae:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	3f ef       	ldi	r19, 0xFF	; 255
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	57 e4       	ldi	r21, 0x47	; 71
    1abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	4c f5       	brge	.+82     	; 0x1b16 <First_Run+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ac6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ac8:	89 a5       	ldd	r24, Y+41	; 0x29
    1aca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9a a3       	std	Y+34, r25	; 0x22
    1aea:	89 a3       	std	Y+33, r24	; 0x21
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <First_Run+0x160>
    1aee:	89 e1       	ldi	r24, 0x19	; 25
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	98 a3       	std	Y+32, r25	; 0x20
    1af4:	8f 8f       	std	Y+31, r24	; 0x1f
    1af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1af8:	98 a1       	ldd	r25, Y+32	; 0x20
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <First_Run+0x14e>
    1afe:	98 a3       	std	Y+32, r25	; 0x20
    1b00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	89 a1       	ldd	r24, Y+33	; 0x21
    1b04:	9a a1       	ldd	r25, Y+34	; 0x22
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	9a a3       	std	Y+34, r25	; 0x22
    1b0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	69 f7       	brne	.-38     	; 0x1aee <First_Run+0x142>
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <First_Run+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	6b a1       	ldd	r22, Y+35	; 0x23
    1b18:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
    1b2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b30:	8d 8f       	std	Y+29, r24	; 0x1d
    1b32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <First_Run+0x18a>
    1b3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d
	uint16 Count_Pass;  //to count entered password digits (5)

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter new pass:");

	for(Count_Pass=0; Count_Pass<5; Count_Pass++) //To take the 5 digits
    1b3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	9c a7       	std	Y+44, r25	; 0x2c
    1b46:	8b a7       	std	Y+43, r24	; 0x2b
    1b48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b4c:	85 30       	cpi	r24, 0x05	; 5
    1b4e:	91 05       	cpc	r25, r1
    1b50:	08 f4       	brcc	.+2      	; 0x1b54 <First_Run+0x1a8>
    1b52:	4e cf       	rjmp	.-356    	; 0x19f0 <First_Run+0x44>
		LCD_displayStringRowColumn(1,Count_Pass,"*"); //Display Digit as *
		New_Pass= New_Pass*10 + key; //Save the 5 digits
		_delay_ms(2200); //press time
	}

	LCD_clearScreen();
    1b54:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter pass:");
    1b58:	22 e7       	ldi	r18, 0x72	; 114
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	a9 01       	movw	r20, r18
    1b62:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)//take the 5 digits again
    1b66:	1c a6       	std	Y+44, r1	; 0x2c
    1b68:	1b a6       	std	Y+43, r1	; 0x2b
    1b6a:	ac c0       	rjmp	.+344    	; 0x1cc4 <First_Run+0x318>
	{
		key = KeyPad_getPressedKey();
    1b6c:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <First_Run+0x1da>

		while(!((key >= 0) && (key <= 9)))
		{
			key = KeyPad_getPressedKey();
    1b7a:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	98 ab       	std	Y+48, r25	; 0x30
    1b84:	8f a7       	std	Y+47, r24	; 0x2f

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)//take the 5 digits again
	{
		key = KeyPad_getPressedKey();

		while(!((key >= 0) && (key <= 9)))
    1b86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b88:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8a:	8a 30       	cpi	r24, 0x0A	; 10
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	a8 f7       	brcc	.-22     	; 0x1b7a <First_Run+0x1ce>
		{
			key = KeyPad_getPressedKey();
		}
		LCD_displayStringRowColumn(1,Count_Pass,"*");/*Display the pressed key as (*)*/
    1b90:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b92:	20 e7       	ldi	r18, 0x70	; 112
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	69 2f       	mov	r22, r25
    1b9a:	a9 01       	movw	r20, r18
    1b9c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
		Re_Pass= Re_Pass*10 + key; //Save the 5 digits /
    1ba0:	89 a9       	ldd	r24, Y+49	; 0x31
    1ba2:	9a a9       	ldd	r25, Y+50	; 0x32
    1ba4:	ab a9       	ldd	r26, Y+51	; 0x33
    1ba6:	bc a9       	ldd	r27, Y+52	; 0x34
    1ba8:	2a e0       	ldi	r18, 0x0A	; 10
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__mulsi3>
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc0:	cc 01       	movw	r24, r24
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	82 0f       	add	r24, r18
    1bc8:	93 1f       	adc	r25, r19
    1bca:	a4 1f       	adc	r26, r20
    1bcc:	b5 1f       	adc	r27, r21
    1bce:	89 ab       	std	Y+49, r24	; 0x31
    1bd0:	9a ab       	std	Y+50, r25	; 0x32
    1bd2:	ab ab       	std	Y+51, r26	; 0x33
    1bd4:	bc ab       	std	Y+52, r27	; 0x34
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e8       	ldi	r25, 0x80	; 128
    1bda:	a9 e0       	ldi	r26, 0x09	; 9
    1bdc:	b5 e4       	ldi	r27, 0x45	; 69
    1bde:	89 8f       	std	Y+25, r24	; 0x19
    1be0:	9a 8f       	std	Y+26, r25	; 0x1a
    1be2:	ab 8f       	std	Y+27, r26	; 0x1b
    1be4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	53 e4       	ldi	r21, 0x43	; 67
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8d 8b       	std	Y+21, r24	; 0x15
    1c00:	9e 8b       	std	Y+22, r25	; 0x16
    1c02:	af 8b       	std	Y+23, r26	; 0x17
    1c04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <First_Run+0x27c>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <First_Run+0x2fa>
	else if (__tmp > 65535)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <First_Run+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9c 8b       	std	Y+20, r25	; 0x14
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <First_Run+0x2dc>
    1c6a:	89 e1       	ldi	r24, 0x19	; 25
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	89 8b       	std	Y+17, r24	; 0x11
    1c72:	89 89       	ldd	r24, Y+17	; 0x11
    1c74:	9a 89       	ldd	r25, Y+18	; 0x12
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <First_Run+0x2ca>
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <First_Run+0x2be>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <First_Run+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9c 8b       	std	Y+20, r25	; 0x14
    1ca4:	8b 8b       	std	Y+19, r24	; 0x13
    1ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	98 89       	ldd	r25, Y+16	; 0x10
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <First_Run+0x306>
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
	}

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Re-enter pass:");

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)//take the 5 digits again
    1cba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	9c a7       	std	Y+44, r25	; 0x2c
    1cc2:	8b a7       	std	Y+43, r24	; 0x2b
    1cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cc8:	85 30       	cpi	r24, 0x05	; 5
    1cca:	91 05       	cpc	r25, r1
    1ccc:	08 f4       	brcc	.+2      	; 0x1cd0 <First_Run+0x324>
    1cce:	4e cf       	rjmp	.-356    	; 0x1b6c <First_Run+0x1c0>
		LCD_displayStringRowColumn(1,Count_Pass,"*");/*Display the pressed key as (*)*/
		Re_Pass= Re_Pass*10 + key; //Save the 5 digits /
		_delay_ms(2200); //press time
	}
	//compare the 2 passwords
	if (New_Pass==Re_Pass)
    1cd0:	2d a9       	ldd	r18, Y+53	; 0x35
    1cd2:	3e a9       	ldd	r19, Y+54	; 0x36
    1cd4:	4f a9       	ldd	r20, Y+55	; 0x37
    1cd6:	58 ad       	ldd	r21, Y+56	; 0x38
    1cd8:	89 a9       	ldd	r24, Y+49	; 0x31
    1cda:	9a a9       	ldd	r25, Y+50	; 0x32
    1cdc:	ab a9       	ldd	r26, Y+51	; 0x33
    1cde:	bc a9       	ldd	r27, Y+52	; 0x34
    1ce0:	28 17       	cp	r18, r24
    1ce2:	39 07       	cpc	r19, r25
    1ce4:	4a 07       	cpc	r20, r26
    1ce6:	5b 07       	cpc	r21, r27
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <First_Run+0x340>
    1cea:	42 c0       	rjmp	.+132    	; 0x1d70 <First_Run+0x3c4>
	{
		UART_sendByte(SAVE); //to start saving
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>

		for(Count_Pass=0;Count_Pass<5;Count_Pass++)
    1cf4:	1c a6       	std	Y+44, r1	; 0x2c
    1cf6:	1b a6       	std	Y+43, r1	; 0x2b
    1cf8:	30 c0       	rjmp	.+96     	; 0x1d5a <First_Run+0x3ae>
		{
			pass = Re_Pass % 10; // the last digit from right
    1cfa:	89 a9       	ldd	r24, Y+49	; 0x31
    1cfc:	9a a9       	ldd	r25, Y+50	; 0x32
    1cfe:	ab a9       	ldd	r26, Y+51	; 0x33
    1d00:	bc a9       	ldd	r27, Y+52	; 0x34
    1d02:	2a e0       	ldi	r18, 0x0A	; 10
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__divmodsi4>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9e a7       	std	Y+46, r25	; 0x2e
    1d18:	8d a7       	std	Y+45, r24	; 0x2d
			while(UART_recieveByte() != M2_Ready){} //Wait till MC2 become ready
    1d1a:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    1d1e:	80 31       	cpi	r24, 0x10	; 16
    1d20:	91 05       	cpc	r25, r1
    1d22:	d9 f7       	brne	.-10     	; 0x1d1a <First_Run+0x36e>
			UART_sendByte(pass); //MC1 sends to MC2 the digit to save it
    1d24:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d26:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d28:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
			Re_Pass /= 10; //To get the next digit to right
    1d2c:	89 a9       	ldd	r24, Y+49	; 0x31
    1d2e:	9a a9       	ldd	r25, Y+50	; 0x32
    1d30:	ab a9       	ldd	r26, Y+51	; 0x33
    1d32:	bc a9       	ldd	r27, Y+52	; 0x34
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__divmodsi4>
    1d44:	da 01       	movw	r26, r20
    1d46:	c9 01       	movw	r24, r18
    1d48:	89 ab       	std	Y+49, r24	; 0x31
    1d4a:	9a ab       	std	Y+50, r25	; 0x32
    1d4c:	ab ab       	std	Y+51, r26	; 0x33
    1d4e:	bc ab       	std	Y+52, r27	; 0x34
	//compare the 2 passwords
	if (New_Pass==Re_Pass)
	{
		UART_sendByte(SAVE); //to start saving

		for(Count_Pass=0;Count_Pass<5;Count_Pass++)
    1d50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	9c a7       	std	Y+44, r25	; 0x2c
    1d58:	8b a7       	std	Y+43, r24	; 0x2b
    1d5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d5e:	85 30       	cpi	r24, 0x05	; 5
    1d60:	91 05       	cpc	r25, r1
    1d62:	58 f2       	brcs	.-106    	; 0x1cfa <First_Run+0x34e>
			pass = Re_Pass % 10; // the last digit from right
			while(UART_recieveByte() != M2_Ready){} //Wait till MC2 become ready
			UART_sendByte(pass); //MC1 sends to MC2 the digit to save it
			Re_Pass /= 10; //To get the next digit to right
		}
		while(UART_recieveByte () != Saving_Done){} //Wait until MC2 send that it finished saving
    1d64:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    1d68:	85 30       	cpi	r24, 0x05	; 5
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	d9 f7       	brne	.-10     	; 0x1d64 <First_Run+0x3b8>
    1d6e:	7d c0       	rjmp	.+250    	; 0x1e6a <First_Run+0x4be>

	}
	else //passwords don't match
	{
		LCD_clearScreen();
    1d70:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Incorrect pass");
    1d74:	21 e8       	ldi	r18, 0x81	; 129
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	a9 01       	movw	r20, r18
    1d7e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e8       	ldi	r25, 0x80	; 128
    1d86:	ab eb       	ldi	r26, 0xBB	; 187
    1d88:	b4 e4       	ldi	r27, 0x44	; 68
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	ad 87       	std	Y+13, r26	; 0x0d
    1d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <First_Run+0x428>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <First_Run+0x4a6>
	else if (__tmp > 65535)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <First_Run+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <First_Run+0x488>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <First_Run+0x476>
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <First_Run+0x46a>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <First_Run+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <First_Run+0x4b2>
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1500);
		First_Run(); //Repeat the function
    1e66:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <First_Run>
	}
}
    1e6a:	e8 96       	adiw	r28, 0x38	; 56
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <Check_pass>:

void Check_pass(const Timer_Config * Config_Ptr)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	aa 97       	sbiw	r28, 0x2a	; 42
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	9a a7       	std	Y+42, r25	; 0x2a
    1e92:	89 a7       	std	Y+41, r24	; 0x29
	sint32 pass=0; //to save the entered 5 digits password
    1e94:	1d a2       	std	Y+37, r1	; 0x25
    1e96:	1e a2       	std	Y+38, r1	; 0x26
    1e98:	1f a2       	std	Y+39, r1	; 0x27
    1e9a:	18 a6       	std	Y+40, r1	; 0x28
	uint16 Count_Pass;  //to count entered password digits (5)
	uint16 key = 0;       //to save the pressed key from the keypad
    1e9c:	1a a2       	std	Y+34, r1	; 0x22
    1e9e:	19 a2       	std	Y+33, r1	; 0x21
	uint16 Pass_Digit=0; //save the password digit and pass it to MC2 to check it
    1ea0:	18 a2       	std	Y+32, r1	; 0x20
    1ea2:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16 error=0; //to check if there is an error in any digit
    1ea4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ea6:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_clearScreen();
    1ea8:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter pass:");
    1eac:	20 e9       	ldi	r18, 0x90	; 144
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	a9 01       	movw	r20, r18
    1eb6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)
    1eba:	1c a2       	std	Y+36, r1	; 0x24
    1ebc:	1b a2       	std	Y+35, r1	; 0x23
    1ebe:	ac c0       	rjmp	.+344    	; 0x2018 <Check_pass+0x19c>
	{
		key = KeyPad_getPressedKey();
    1ec0:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9a a3       	std	Y+34, r25	; 0x22
    1eca:	89 a3       	std	Y+33, r24	; 0x21
    1ecc:	06 c0       	rjmp	.+12     	; 0x1eda <Check_pass+0x5e>
		while(!((key >= 0) && (key <= 9)))
		{
			key = KeyPad_getPressedKey();
    1ece:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
	LCD_displayStringRowColumn(0,0,"Enter pass:");

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)
	{
		key = KeyPad_getPressedKey();
		while(!((key >= 0) && (key <= 9)))
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	8a 30       	cpi	r24, 0x0A	; 10
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	a8 f7       	brcc	.-22     	; 0x1ece <Check_pass+0x52>
		{
			key = KeyPad_getPressedKey();
		}
		LCD_displayStringRowColumn(1,Count_Pass,"*"); //Display the pressed key as *
    1ee4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ee6:	20 e7       	ldi	r18, 0x70	; 112
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	69 2f       	mov	r22, r25
    1eee:	a9 01       	movw	r20, r18
    1ef0:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
		pass= pass*10 + key; //Save the 5 digits
    1ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef8:	af a1       	ldd	r26, Y+39	; 0x27
    1efa:	b8 a5       	ldd	r27, Y+40	; 0x28
    1efc:	2a e0       	ldi	r18, 0x0A	; 10
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__mulsi3>
    1f0c:	9b 01       	movw	r18, r22
    1f0e:	ac 01       	movw	r20, r24
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	cc 01       	movw	r24, r24
    1f16:	a0 e0       	ldi	r26, 0x00	; 0
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	82 0f       	add	r24, r18
    1f1c:	93 1f       	adc	r25, r19
    1f1e:	a4 1f       	adc	r26, r20
    1f20:	b5 1f       	adc	r27, r21
    1f22:	8d a3       	std	Y+37, r24	; 0x25
    1f24:	9e a3       	std	Y+38, r25	; 0x26
    1f26:	af a3       	std	Y+39, r26	; 0x27
    1f28:	b8 a7       	std	Y+40, r27	; 0x28
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e8       	ldi	r25, 0x80	; 128
    1f2e:	a9 e0       	ldi	r26, 0x09	; 9
    1f30:	b5 e4       	ldi	r27, 0x45	; 69
    1f32:	89 8f       	std	Y+25, r24	; 0x19
    1f34:	9a 8f       	std	Y+26, r25	; 0x1a
    1f36:	ab 8f       	std	Y+27, r26	; 0x1b
    1f38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a e7       	ldi	r20, 0x7A	; 122
    1f48:	53 e4       	ldi	r21, 0x43	; 67
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	8d 8b       	std	Y+21, r24	; 0x15
    1f54:	9e 8b       	std	Y+22, r25	; 0x16
    1f56:	af 8b       	std	Y+23, r26	; 0x17
    1f58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f60:	98 8d       	ldd	r25, Y+24	; 0x18
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e8       	ldi	r20, 0x80	; 128
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6e:	88 23       	and	r24, r24
    1f70:	2c f4       	brge	.+10     	; 0x1f7c <Check_pass+0x100>
		__ticks = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 8b       	std	Y+20, r25	; 0x14
    1f78:	8b 8b       	std	Y+19, r24	; 0x13
    1f7a:	3f c0       	rjmp	.+126    	; 0x1ffa <Check_pass+0x17e>
	else if (__tmp > 65535)
    1f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f80:	8f 89       	ldd	r24, Y+23	; 0x17
    1f82:	98 8d       	ldd	r25, Y+24	; 0x18
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	3f ef       	ldi	r19, 0xFF	; 255
    1f88:	4f e7       	ldi	r20, 0x7F	; 127
    1f8a:	57 e4       	ldi	r21, 0x47	; 71
    1f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f90:	18 16       	cp	r1, r24
    1f92:	4c f5       	brge	.+82     	; 0x1fe6 <Check_pass+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f94:	69 8d       	ldd	r22, Y+25	; 0x19
    1f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <Check_pass+0x160>
    1fbe:	89 e1       	ldi	r24, 0x19	; 25
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9a 8b       	std	Y+18, r25	; 0x12
    1fc4:	89 8b       	std	Y+17, r24	; 0x11
    1fc6:	89 89       	ldd	r24, Y+17	; 0x11
    1fc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <Check_pass+0x14e>
    1fce:	9a 8b       	std	Y+18, r25	; 0x12
    1fd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	9c 8b       	std	Y+20, r25	; 0x14
    1fda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <Check_pass+0x142>
    1fe4:	14 c0       	rjmp	.+40     	; 0x200e <Check_pass+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9c 8b       	std	Y+20, r25	; 0x14
    1ff8:	8b 8b       	std	Y+19, r24	; 0x13
    1ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffe:	98 8b       	std	Y+16, r25	; 0x10
    2000:	8f 87       	std	Y+15, r24	; 0x0f
    2002:	8f 85       	ldd	r24, Y+15	; 0x0f
    2004:	98 89       	ldd	r25, Y+16	; 0x10
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <Check_pass+0x18a>
    200a:	98 8b       	std	Y+16, r25	; 0x10
    200c:	8f 87       	std	Y+15, r24	; 0x0f
	uint16 error=0; //to check if there is an error in any digit

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter pass:");

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)
    200e:	8b a1       	ldd	r24, Y+35	; 0x23
    2010:	9c a1       	ldd	r25, Y+36	; 0x24
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	9c a3       	std	Y+36, r25	; 0x24
    2016:	8b a3       	std	Y+35, r24	; 0x23
    2018:	8b a1       	ldd	r24, Y+35	; 0x23
    201a:	9c a1       	ldd	r25, Y+36	; 0x24
    201c:	85 30       	cpi	r24, 0x05	; 5
    201e:	91 05       	cpc	r25, r1
    2020:	08 f4       	brcc	.+2      	; 0x2024 <Check_pass+0x1a8>
    2022:	4e cf       	rjmp	.-356    	; 0x1ec0 <Check_pass+0x44>
		LCD_displayStringRowColumn(1,Count_Pass,"*"); //Display the pressed key as *
		pass= pass*10 + key; //Save the 5 digits
		_delay_ms(2200);
	}

	UART_sendByte(Check_Pass); //MC1 send to MC2 to check the password
    2024:	87 e0       	ldi	r24, 0x07	; 7
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)
    202c:	1c a2       	std	Y+36, r1	; 0x24
    202e:	1b a2       	std	Y+35, r1	; 0x23
    2030:	34 c0       	rjmp	.+104    	; 0x209a <Check_pass+0x21e>
	{
		Pass_Digit = pass % 10; // the last digit from right
    2032:	8d a1       	ldd	r24, Y+37	; 0x25
    2034:	9e a1       	ldd	r25, Y+38	; 0x26
    2036:	af a1       	ldd	r26, Y+39	; 0x27
    2038:	b8 a5       	ldd	r27, Y+40	; 0x28
    203a:	2a e0       	ldi	r18, 0x0A	; 10
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__divmodsi4>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	98 a3       	std	Y+32, r25	; 0x20
    2050:	8f 8f       	std	Y+31, r24	; 0x1f
		UART_sendByte(Pass_Digit);
    2052:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2054:	98 a1       	ldd	r25, Y+32	; 0x20
    2056:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		if( UART_recieveByte() == Error_Pass)// the sent digit is wrong
    205a:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	29 f4       	brne	.+10     	; 0x206c <Check_pass+0x1f0>
		{
			error ++; //count number of errors untill 3
    2062:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2064:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	9e 8f       	std	Y+30, r25	; 0x1e
    206a:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		pass /= 10; // to get the next digit from right
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	af a1       	ldd	r26, Y+39	; 0x27
    2072:	b8 a5       	ldd	r27, Y+40	; 0x28
    2074:	2a e0       	ldi	r18, 0x0A	; 10
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__divmodsi4>
    2084:	da 01       	movw	r26, r20
    2086:	c9 01       	movw	r24, r18
    2088:	8d a3       	std	Y+37, r24	; 0x25
    208a:	9e a3       	std	Y+38, r25	; 0x26
    208c:	af a3       	std	Y+39, r26	; 0x27
    208e:	b8 a7       	std	Y+40, r27	; 0x28
		_delay_ms(2200);
	}

	UART_sendByte(Check_Pass); //MC1 send to MC2 to check the password

	for(Count_Pass=0; Count_Pass<5; Count_Pass++)
    2090:	8b a1       	ldd	r24, Y+35	; 0x23
    2092:	9c a1       	ldd	r25, Y+36	; 0x24
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	9c a3       	std	Y+36, r25	; 0x24
    2098:	8b a3       	std	Y+35, r24	; 0x23
    209a:	8b a1       	ldd	r24, Y+35	; 0x23
    209c:	9c a1       	ldd	r25, Y+36	; 0x24
    209e:	85 30       	cpi	r24, 0x05	; 5
    20a0:	91 05       	cpc	r25, r1
    20a2:	38 f2       	brcs	.-114    	; 0x2032 <Check_pass+0x1b6>
	}

	/*if error = zero,this means that the password is correct
	 * If it 1 or more , we will increase Error_Counter and repeat the function
	 * If counter_error became 3, the LCD will display error message for 1 minute*/
	if (error != 0) //The password is wrong
    20a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	09 f4       	brne	.+2      	; 0x20ae <Check_pass+0x232>
    20ac:	ae c0       	rjmp	.+348    	; 0x220a <Check_pass+0x38e>
	{
		Error_Counter ++;
    20ae:	80 91 0e 01 	lds	r24, 0x010E
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	80 93 0e 01 	sts	0x010E, r24
		UART_sendByte(Error_Counter);
    20b8:	80 91 0e 01 	lds	r24, 0x010E
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		/*MC1 send the value of the error counter to MC2
		 *If the error counter is less than 3
		 *it will display a message and repeat the check function*/
		if(Error_Counter < 3)
    20c4:	80 91 0e 01 	lds	r24, 0x010E
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <Check_pass+0x252>
    20cc:	80 c0       	rjmp	.+256    	; 0x21ce <Check_pass+0x352>
		{
			LCD_clearScreen(); /*Clear LCD*/
    20ce:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Wrong pass");
    20d2:	2c e9       	ldi	r18, 0x9C	; 156
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	a9 01       	movw	r20, r18
    20dc:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e8       	ldi	r25, 0x80	; 128
    20e4:	ab eb       	ldi	r26, 0xBB	; 187
    20e6:	b4 e4       	ldi	r27, 0x44	; 68
    20e8:	8b 87       	std	Y+11, r24	; 0x0b
    20ea:	9c 87       	std	Y+12, r25	; 0x0c
    20ec:	ad 87       	std	Y+13, r26	; 0x0d
    20ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	53 e4       	ldi	r21, 0x43	; 67
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8f 83       	std	Y+7, r24	; 0x07
    210a:	98 87       	std	Y+8, r25	; 0x08
    210c:	a9 87       	std	Y+9, r26	; 0x09
    210e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <Check_pass+0x2b6>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <Check_pass+0x334>
	else if (__tmp > 65535)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	57 e4       	ldi	r21, 0x47	; 71
    2142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	4c f5       	brge	.+82     	; 0x219c <Check_pass+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	6b 85       	ldd	r22, Y+11	; 0x0b
    214c:	7c 85       	ldd	r23, Y+12	; 0x0c
    214e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2150:	9e 85       	ldd	r25, Y+14	; 0x0e
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <Check_pass+0x316>
    2174:	89 e1       	ldi	r24, 0x19	; 25
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <Check_pass+0x304>
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <Check_pass+0x2f8>
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <Check_pass+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <Check_pass+0x340>
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			Check_pass(Config_Ptr); //Repeat the check function
    21c4:	89 a5       	ldd	r24, Y+41	; 0x29
    21c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21c8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Check_pass>
    21cc:	24 c0       	rjmp	.+72     	; 0x2216 <Check_pass+0x39a>
		}
		else //user entered password wrong for 3 times)
		{
			LCD_clearScreen();
    21ce:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>

			//Initialize the timer and pass the required configurations to it
			Timer_init(Config_Ptr);
    21d2:	89 a5       	ldd	r24, Y+41	; 0x29
    21d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Timer_init>
			tick =0;
    21da:	10 92 10 01 	sts	0x0110, r1
    21de:	10 92 0f 01 	sts	0x010F, r1
			Sec_Flag =0;
    21e2:	10 92 0d 01 	sts	0x010D, r1
    21e6:	07 c0       	rjmp	.+14     	; 0x21f6 <Check_pass+0x37a>
			while (Sec_Flag != 60) // error message for 1 minute
			{
				LCD_displayStringRowColumn(0,0,"Wrong pass");
    21e8:	2c e9       	ldi	r18, 0x9C	; 156
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	a9 01       	movw	r20, r18
    21f2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>

			//Initialize the timer and pass the required configurations to it
			Timer_init(Config_Ptr);
			tick =0;
			Sec_Flag =0;
			while (Sec_Flag != 60) // error message for 1 minute
    21f6:	80 91 0d 01 	lds	r24, 0x010D
    21fa:	8c 33       	cpi	r24, 0x3C	; 60
    21fc:	a9 f7       	brne	.-22     	; 0x21e8 <Check_pass+0x36c>
			{
				LCD_displayStringRowColumn(0,0,"Wrong pass");
			}

			Error_Counter = 0;
    21fe:	10 92 0e 01 	sts	0x010E, r1
			return_flag =1; //the user has entered the password wrong for 3 times*/
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 11 01 	sts	0x0111, r24
    2208:	06 c0       	rjmp	.+12     	; 0x2216 <Check_pass+0x39a>
		}
	}
	else //The password is right
	{ /*MC1 should send number of errors
			   so 4 means that no error in the entered password*/
		UART_sendByte(4);
    220a:	84 e0       	ldi	r24, 0x04	; 4
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		Error_Counter = 0; // to count correct the next run
    2212:	10 92 0e 01 	sts	0x010E, r1
	}
}
    2216:	aa 96       	adiw	r28, 0x2a	; 42
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <Open_gate>:
void Open_gate(const Timer_Config *Config_Ptr)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <Open_gate+0x6>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01

	UART_sendByte(UNLOCK); //MC1 sends to MC2 to open the gate
    2236:	89 e0       	ldi	r24, 0x09	; 9
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>

	LCD_clearScreen();
    223e:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
	//Initialize the timer and pass the required configurations to it
	Timer_init(Config_Ptr);
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <Timer_init>
	tick =0;
    224a:	10 92 10 01 	sts	0x0110, r1
    224e:	10 92 0f 01 	sts	0x010F, r1
	Sec_Flag =0;
    2252:	10 92 0d 01 	sts	0x010D, r1
    2256:	07 c0       	rjmp	.+14     	; 0x2266 <Open_gate+0x3e>
	while(Sec_Flag != 15)//openning the door
	{
		LCD_displayStringRowColumn(0,0,"opening the door");
    2258:	27 ea       	ldi	r18, 0xA7	; 167
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	a9 01       	movw	r20, r18
    2262:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
	LCD_clearScreen();
	//Initialize the timer and pass the required configurations to it
	Timer_init(Config_Ptr);
	tick =0;
	Sec_Flag =0;
	while(Sec_Flag != 15)//openning the door
    2266:	80 91 0d 01 	lds	r24, 0x010D
    226a:	8f 30       	cpi	r24, 0x0F	; 15
    226c:	a9 f7       	brne	.-22     	; 0x2258 <Open_gate+0x30>
	{
		LCD_displayStringRowColumn(0,0,"opening the door");
	}
	LCD_clearScreen();
    226e:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>

	tick =0;
    2272:	10 92 10 01 	sts	0x0110, r1
    2276:	10 92 0f 01 	sts	0x010F, r1
	Sec_Flag =0;
    227a:	10 92 0d 01 	sts	0x010D, r1
    227e:	07 c0       	rjmp	.+14     	; 0x228e <Open_gate+0x66>
	while(Sec_Flag != 3)//door opened
	{
		LCD_displayStringRowColumn(0,0,"Door is opened");
    2280:	28 eb       	ldi	r18, 0xB8	; 184
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	a9 01       	movw	r20, r18
    228a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
	}
	LCD_clearScreen();

	tick =0;
	Sec_Flag =0;
	while(Sec_Flag != 3)//door opened
    228e:	80 91 0d 01 	lds	r24, 0x010D
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	a9 f7       	brne	.-22     	; 0x2280 <Open_gate+0x58>
	{
		LCD_displayStringRowColumn(0,0,"Door is opened");
	}

	LCD_clearScreen();
    2296:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
	tick =0;
    229a:	10 92 10 01 	sts	0x0110, r1
    229e:	10 92 0f 01 	sts	0x010F, r1
	Sec_Flag =0;
    22a2:	10 92 0d 01 	sts	0x010D, r1
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <Open_gate+0x8e>
	while(Sec_Flag != 15)//closing the door
	{
		LCD_displayStringRowColumn(0,0,"closing door");
    22a8:	27 ec       	ldi	r18, 0xC7	; 199
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	a9 01       	movw	r20, r18
    22b2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
	}

	LCD_clearScreen();
	tick =0;
	Sec_Flag =0;
	while(Sec_Flag != 15)//closing the door
    22b6:	80 91 0d 01 	lds	r24, 0x010D
    22ba:	8f 30       	cpi	r24, 0x0F	; 15
    22bc:	a9 f7       	brne	.-22     	; 0x22a8 <Open_gate+0x80>
		LCD_displayStringRowColumn(0,0,"closing door");
	}



}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <Main_Options>:
void Main_Options(const Timer_Config *Config_Ptr){
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <Main_Options+0x6>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <Main_Options+0x8>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03

	uint16 key = 0;       //to save the pressed key from the keypad
    22d8:	1a 82       	std	Y+2, r1	; 0x02
    22da:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    22dc:	0e 94 89 0c 	call	0x1912	; 0x1912 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"*:Change password");
    22e0:	24 ed       	ldi	r18, 0xD4	; 212
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	a9 01       	movw	r20, r18
    22ea:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"%:Open the door");
    22ee:	26 ee       	ldi	r18, 0xE6	; 230
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	a9 01       	movw	r20, r18
    22f8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_displayStringRowColumn>

	key = KeyPad_getPressedKey();
    22fc:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9a 83       	std	Y+2, r25	; 0x02
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	06 c0       	rjmp	.+12     	; 0x2316 <Main_Options+0x4e>

	while((key != '*') && (key != '%'))//check if it's right digit
	{
		key = KeyPad_getPressedKey();
    230a:	0e 94 01 07 	call	0xe02	; 0xe02 <KeyPad_getPressedKey>
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0,0,"*:Change password");
	LCD_displayStringRowColumn(1,0,"%:Open the door");

	key = KeyPad_getPressedKey();

	while((key != '*') && (key != '%'))//check if it's right digit
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	8a 32       	cpi	r24, 0x2A	; 42
    231c:	91 05       	cpc	r25, r1
    231e:	29 f0       	breq	.+10     	; 0x232a <Main_Options+0x62>
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	85 32       	cpi	r24, 0x25	; 37
    2326:	91 05       	cpc	r25, r1
    2328:	81 f7       	brne	.-32     	; 0x230a <Main_Options+0x42>
	{
		key = KeyPad_getPressedKey();
	}

	Check_pass(Config_Ptr);
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Check_pass>
	UART_sendByte(return_flag);
    2332:	80 91 11 01 	lds	r24, 0x0111
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>


	if(return_flag == 0)
    233e:	80 91 11 01 	lds	r24, 0x0111
    2342:	88 23       	and	r24, r24
    2344:	b1 f4       	brne	.+44     	; 0x2372 <Main_Options+0xaa>
	{
		UART_sendByte(key);
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	9a 81       	ldd	r25, Y+2	; 0x02
    234a:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		if (key == '*') //the user wants to change the password
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	8a 32       	cpi	r24, 0x2A	; 42
    2354:	91 05       	cpc	r25, r1
    2356:	19 f4       	brne	.+6      	; 0x235e <Main_Options+0x96>
		{
			First_Run(); // to enter the new password and send it to MC2 to save it
    2358:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <First_Run>
    235c:	0c c0       	rjmp	.+24     	; 0x2376 <Main_Options+0xae>
		}
		else if (key == '%') // the user wants to open the door
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	85 32       	cpi	r24, 0x25	; 37
    2364:	91 05       	cpc	r25, r1
    2366:	39 f4       	brne	.+14     	; 0x2376 <Main_Options+0xae>
		{
			Open_gate(Config_Ptr);
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	0e 94 14 11 	call	0x2228	; 0x2228 <Open_gate>
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <Main_Options+0xae>
		}
	}
	else /*This means that the user has entered the password wrong for 3 times*/
	{
		return_flag=0; //to work correct the next time
    2372:	10 92 11 01 	sts	0x0111, r1
	}

}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <main>:

int main(void){
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	69 97       	sbiw	r28, 0x19	; 25
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61

	uint8 First_Run_Flag=0;
    2398:	19 82       	std	Y+1, r1	; 0x01
	/*To check whether the one run code is done before or not
	 *MC2 read the address where the Initialized flag is declared (first run)
	 *and put it in this flag then send it to MC1. If this is equal to the
	 *Initialized flag, then the one run code was done so we will go to the Main Options*/

	Timer_Config Timer_Config = {timer0,OVERFLOW,CPU_1024,0,0}; //input to the timer structure
    239a:	ce 01       	movw	r24, r28
    239c:	02 96       	adiw	r24, 0x02	; 2
    239e:	99 8b       	std	Y+17, r25	; 0x11
    23a0:	88 8b       	std	Y+16, r24	; 0x10
    23a2:	e5 e0       	ldi	r30, 0x05	; 5
    23a4:	f1 e0       	ldi	r31, 0x01	; 1
    23a6:	fb 8b       	std	Y+19, r31	; 0x13
    23a8:	ea 8b       	std	Y+18, r30	; 0x12
    23aa:	f7 e0       	ldi	r31, 0x07	; 7
    23ac:	fc 8b       	std	Y+20, r31	; 0x14
    23ae:	ea 89       	ldd	r30, Y+18	; 0x12
    23b0:	fb 89       	ldd	r31, Y+19	; 0x13
    23b2:	00 80       	ld	r0, Z
    23b4:	8a 89       	ldd	r24, Y+18	; 0x12
    23b6:	9b 89       	ldd	r25, Y+19	; 0x13
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	9b 8b       	std	Y+19, r25	; 0x13
    23bc:	8a 8b       	std	Y+18, r24	; 0x12
    23be:	e8 89       	ldd	r30, Y+16	; 0x10
    23c0:	f9 89       	ldd	r31, Y+17	; 0x11
    23c2:	00 82       	st	Z, r0
    23c4:	88 89       	ldd	r24, Y+16	; 0x10
    23c6:	99 89       	ldd	r25, Y+17	; 0x11
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	99 8b       	std	Y+17, r25	; 0x11
    23cc:	88 8b       	std	Y+16, r24	; 0x10
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	91 50       	subi	r25, 0x01	; 1
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	ec 89       	ldd	r30, Y+20	; 0x14
    23d6:	ee 23       	and	r30, r30
    23d8:	51 f7       	brne	.-44     	; 0x23ae <main+0x2a>


	/*Set the call back function pointer in the timer driver
	 to the function that calculate seconds*/
	Timer0_Overflow_CallBack(Cal_Time);
    23da:	86 eb       	ldi	r24, 0xB6	; 182
    23dc:	9c e0       	ldi	r25, 0x0C	; 12
    23de:	0e 94 86 14 	call	0x290c	; 0x290c <Timer0_Overflow_CallBack>


	UART_Config UART_Config = {disabled,bit1,bit8,9600};////input to the UART structure
    23e2:	ce 01       	movw	r24, r28
    23e4:	09 96       	adiw	r24, 0x09	; 9
    23e6:	9e 8b       	std	Y+22, r25	; 0x16
    23e8:	8d 8b       	std	Y+21, r24	; 0x15
    23ea:	ee ef       	ldi	r30, 0xFE	; 254
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	f8 8f       	std	Y+24, r31	; 0x18
    23f0:	ef 8b       	std	Y+23, r30	; 0x17
    23f2:	f7 e0       	ldi	r31, 0x07	; 7
    23f4:	f9 8f       	std	Y+25, r31	; 0x19
    23f6:	ef 89       	ldd	r30, Y+23	; 0x17
    23f8:	f8 8d       	ldd	r31, Y+24	; 0x18
    23fa:	00 80       	ld	r0, Z
    23fc:	8f 89       	ldd	r24, Y+23	; 0x17
    23fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	98 8f       	std	Y+24, r25	; 0x18
    2404:	8f 8b       	std	Y+23, r24	; 0x17
    2406:	ed 89       	ldd	r30, Y+21	; 0x15
    2408:	fe 89       	ldd	r31, Y+22	; 0x16
    240a:	00 82       	st	Z, r0
    240c:	8d 89       	ldd	r24, Y+21	; 0x15
    240e:	9e 89       	ldd	r25, Y+22	; 0x16
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	9e 8b       	std	Y+22, r25	; 0x16
    2414:	8d 8b       	std	Y+21, r24	; 0x15
    2416:	99 8d       	ldd	r25, Y+25	; 0x19
    2418:	91 50       	subi	r25, 0x01	; 1
    241a:	99 8f       	std	Y+25, r25	; 0x19
    241c:	e9 8d       	ldd	r30, Y+25	; 0x19
    241e:	ee 23       	and	r30, r30
    2420:	51 f7       	brne	.-44     	; 0x23f6 <main+0x72>


	LCD_init();
    2422:	0e 94 ff 07 	call	0xffe	; 0xffe <LCD_init>
	UART_init(& UART_Config);
    2426:	ce 01       	movw	r24, r28
    2428:	09 96       	adiw	r24, 0x09	; 9
    242a:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	while(1){

		/*M1 sends to M2 that it's ready
		then ,M2 reads the address of the initialized flag and send it to M1
		to check if it's first run or not*/
		UART_sendByte(M1_Ready);
    242e:	80 e2       	ldi	r24, 0x20	; 32
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_sendByte>
		First_Run_Flag= UART_recieveByte();
    2436:	0e 94 73 06 	call	0xce6	; 0xce6 <UART_recieveByte>
    243a:	89 83       	std	Y+1, r24	; 0x01


		if(First_Run_Flag != Init_Flag )
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	81 30       	cpi	r24, 0x01	; 1
    2440:	19 f0       	breq	.+6      	; 0x2448 <main+0xc4>
		{
			//if they are not equal so it's the first run
			First_Run();
    2442:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <First_Run>
    2446:	f3 cf       	rjmp	.-26     	; 0x242e <main+0xaa>
		}

		else
		{//if they are  equal so the first run is done
			Main_Options(& Timer_Config);
    2448:	ce 01       	movw	r24, r28
    244a:	02 96       	adiw	r24, 0x02	; 2
    244c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Main_Options>
    2450:	ee cf       	rjmp	.-36     	; 0x242e <main+0xaa>

00002452 <__vector_9>:

//ISR For Timer 0


ISR (TIMER0_OVF_vect)
{
    2452:	1f 92       	push	r1
    2454:	0f 92       	push	r0
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	0f 92       	push	r0
    245a:	11 24       	eor	r1, r1
    245c:	2f 93       	push	r18
    245e:	3f 93       	push	r19
    2460:	4f 93       	push	r20
    2462:	5f 93       	push	r21
    2464:	6f 93       	push	r22
    2466:	7f 93       	push	r23
    2468:	8f 93       	push	r24
    246a:	9f 93       	push	r25
    246c:	af 93       	push	r26
    246e:	bf 93       	push	r27
    2470:	ef 93       	push	r30
    2472:	ff 93       	push	r31
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_overflow_callBackPtr != NULL_PTR)
    247c:	80 91 12 01 	lds	r24, 0x0112
    2480:	90 91 13 01 	lds	r25, 0x0113
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	29 f0       	breq	.+10     	; 0x2492 <__vector_9+0x40>
	{
		// Call the Call Back function (using pointer to function )after each overflow
		(*g_t_0_overflow_callBackPtr)();
    2488:	e0 91 12 01 	lds	r30, 0x0112
    248c:	f0 91 13 01 	lds	r31, 0x0113
    2490:	09 95       	icall
	}
}
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	ff 91       	pop	r31
    2498:	ef 91       	pop	r30
    249a:	bf 91       	pop	r27
    249c:	af 91       	pop	r26
    249e:	9f 91       	pop	r25
    24a0:	8f 91       	pop	r24
    24a2:	7f 91       	pop	r23
    24a4:	6f 91       	pop	r22
    24a6:	5f 91       	pop	r21
    24a8:	4f 91       	pop	r20
    24aa:	3f 91       	pop	r19
    24ac:	2f 91       	pop	r18
    24ae:	0f 90       	pop	r0
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	0f 90       	pop	r0
    24b4:	1f 90       	pop	r1
    24b6:	18 95       	reti

000024b8 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    24b8:	1f 92       	push	r1
    24ba:	0f 92       	push	r0
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	0f 92       	push	r0
    24c0:	11 24       	eor	r1, r1
    24c2:	2f 93       	push	r18
    24c4:	3f 93       	push	r19
    24c6:	4f 93       	push	r20
    24c8:	5f 93       	push	r21
    24ca:	6f 93       	push	r22
    24cc:	7f 93       	push	r23
    24ce:	8f 93       	push	r24
    24d0:	9f 93       	push	r25
    24d2:	af 93       	push	r26
    24d4:	bf 93       	push	r27
    24d6:	ef 93       	push	r30
    24d8:	ff 93       	push	r31
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_compare_callBackPtr != NULL_PTR)
    24e2:	80 91 14 01 	lds	r24, 0x0114
    24e6:	90 91 15 01 	lds	r25, 0x0115
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	29 f0       	breq	.+10     	; 0x24f8 <__vector_19+0x40>
	{
		/* Call the Call Back function (using pointer to function)
		after the timer reach the compare value*/

		(*g_t_0_compare_callBackPtr)();
    24ee:	e0 91 14 01 	lds	r30, 0x0114
    24f2:	f0 91 15 01 	lds	r31, 0x0115
    24f6:	09 95       	icall

	}
}
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	ff 91       	pop	r31
    24fe:	ef 91       	pop	r30
    2500:	bf 91       	pop	r27
    2502:	af 91       	pop	r26
    2504:	9f 91       	pop	r25
    2506:	8f 91       	pop	r24
    2508:	7f 91       	pop	r23
    250a:	6f 91       	pop	r22
    250c:	5f 91       	pop	r21
    250e:	4f 91       	pop	r20
    2510:	3f 91       	pop	r19
    2512:	2f 91       	pop	r18
    2514:	0f 90       	pop	r0
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	0f 90       	pop	r0
    251a:	1f 90       	pop	r1
    251c:	18 95       	reti

0000251e <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    251e:	1f 92       	push	r1
    2520:	0f 92       	push	r0
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	0f 92       	push	r0
    2526:	11 24       	eor	r1, r1
    2528:	2f 93       	push	r18
    252a:	3f 93       	push	r19
    252c:	4f 93       	push	r20
    252e:	5f 93       	push	r21
    2530:	6f 93       	push	r22
    2532:	7f 93       	push	r23
    2534:	8f 93       	push	r24
    2536:	9f 93       	push	r25
    2538:	af 93       	push	r26
    253a:	bf 93       	push	r27
    253c:	ef 93       	push	r30
    253e:	ff 93       	push	r31
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	if(g_t_1_overflow_callBackPtr != NULL_PTR)
    2548:	80 91 16 01 	lds	r24, 0x0116
    254c:	90 91 17 01 	lds	r25, 0x0117
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	29 f0       	breq	.+10     	; 0x255e <__vector_8+0x40>
	{
		// Call the Call Back function (using pointer to function) after each overflow
		(*g_t_1_overflow_callBackPtr)();
    2554:	e0 91 16 01 	lds	r30, 0x0116
    2558:	f0 91 17 01 	lds	r31, 0x0117
    255c:	09 95       	icall
	}
}
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	ff 91       	pop	r31
    2564:	ef 91       	pop	r30
    2566:	bf 91       	pop	r27
    2568:	af 91       	pop	r26
    256a:	9f 91       	pop	r25
    256c:	8f 91       	pop	r24
    256e:	7f 91       	pop	r23
    2570:	6f 91       	pop	r22
    2572:	5f 91       	pop	r21
    2574:	4f 91       	pop	r20
    2576:	3f 91       	pop	r19
    2578:	2f 91       	pop	r18
    257a:	0f 90       	pop	r0
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	0f 90       	pop	r0
    2580:	1f 90       	pop	r1
    2582:	18 95       	reti

00002584 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2584:	1f 92       	push	r1
    2586:	0f 92       	push	r0
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	0f 92       	push	r0
    258c:	11 24       	eor	r1, r1
    258e:	2f 93       	push	r18
    2590:	3f 93       	push	r19
    2592:	4f 93       	push	r20
    2594:	5f 93       	push	r21
    2596:	6f 93       	push	r22
    2598:	7f 93       	push	r23
    259a:	8f 93       	push	r24
    259c:	9f 93       	push	r25
    259e:	af 93       	push	r26
    25a0:	bf 93       	push	r27
    25a2:	ef 93       	push	r30
    25a4:	ff 93       	push	r31
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	if(g_t_1_compare_callBackPtr != NULL_PTR)
    25ae:	80 91 18 01 	lds	r24, 0x0118
    25b2:	90 91 19 01 	lds	r25, 0x0119
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <__vector_6+0x40>
	{
		/* Call the Call Back function (using pointer to function)
		after the timer reach the compare value*/
		(*g_t_1_compare_callBackPtr)();
    25ba:	e0 91 18 01 	lds	r30, 0x0118
    25be:	f0 91 19 01 	lds	r31, 0x0119
    25c2:	09 95       	icall
	}
}
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	ff 91       	pop	r31
    25ca:	ef 91       	pop	r30
    25cc:	bf 91       	pop	r27
    25ce:	af 91       	pop	r26
    25d0:	9f 91       	pop	r25
    25d2:	8f 91       	pop	r24
    25d4:	7f 91       	pop	r23
    25d6:	6f 91       	pop	r22
    25d8:	5f 91       	pop	r21
    25da:	4f 91       	pop	r20
    25dc:	3f 91       	pop	r19
    25de:	2f 91       	pop	r18
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	0f 90       	pop	r0
    25e6:	1f 90       	pop	r1
    25e8:	18 95       	reti

000025ea <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	2f 93       	push	r18
    25f6:	3f 93       	push	r19
    25f8:	4f 93       	push	r20
    25fa:	5f 93       	push	r21
    25fc:	6f 93       	push	r22
    25fe:	7f 93       	push	r23
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	af 93       	push	r26
    2606:	bf 93       	push	r27
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	if(g_t_2_overflow_callBackPtr != NULL_PTR)
    2614:	80 91 1a 01 	lds	r24, 0x011A
    2618:	90 91 1b 01 	lds	r25, 0x011B
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	29 f0       	breq	.+10     	; 0x262a <__vector_4+0x40>
	{
		// Call the Call Back function (using pointer to function) after each overflow
		(*g_t_2_overflow_callBackPtr)();
    2620:	e0 91 1a 01 	lds	r30, 0x011A
    2624:	f0 91 1b 01 	lds	r31, 0x011B
    2628:	09 95       	icall
	}
}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	ff 91       	pop	r31
    2630:	ef 91       	pop	r30
    2632:	bf 91       	pop	r27
    2634:	af 91       	pop	r26
    2636:	9f 91       	pop	r25
    2638:	8f 91       	pop	r24
    263a:	7f 91       	pop	r23
    263c:	6f 91       	pop	r22
    263e:	5f 91       	pop	r21
    2640:	4f 91       	pop	r20
    2642:	3f 91       	pop	r19
    2644:	2f 91       	pop	r18
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	11 24       	eor	r1, r1
    265a:	2f 93       	push	r18
    265c:	3f 93       	push	r19
    265e:	4f 93       	push	r20
    2660:	5f 93       	push	r21
    2662:	6f 93       	push	r22
    2664:	7f 93       	push	r23
    2666:	8f 93       	push	r24
    2668:	9f 93       	push	r25
    266a:	af 93       	push	r26
    266c:	bf 93       	push	r27
    266e:	ef 93       	push	r30
    2670:	ff 93       	push	r31
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
	if(g_t_2_compare_callBackPtr != NULL_PTR)
    267a:	80 91 1c 01 	lds	r24, 0x011C
    267e:	90 91 1d 01 	lds	r25, 0x011D
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	29 f0       	breq	.+10     	; 0x2690 <__vector_3+0x40>
	{

		/* Call the Call Back function (using pointer to function)
		after the timer reach the compare value*/

		(*g_t_2_compare_callBackPtr)();
    2686:	e0 91 1c 01 	lds	r30, 0x011C
    268a:	f0 91 1d 01 	lds	r31, 0x011D
    268e:	09 95       	icall
	}
}
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	ff 91       	pop	r31
    2696:	ef 91       	pop	r30
    2698:	bf 91       	pop	r27
    269a:	af 91       	pop	r26
    269c:	9f 91       	pop	r25
    269e:	8f 91       	pop	r24
    26a0:	7f 91       	pop	r23
    26a2:	6f 91       	pop	r22
    26a4:	5f 91       	pop	r21
    26a6:	4f 91       	pop	r20
    26a8:	3f 91       	pop	r19
    26aa:	2f 91       	pop	r18
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <Timer_init>:


//Function that initialize the timer

void Timer_init(const Timer_Config * Config_Ptr)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	2a 97       	sbiw	r28, 0x0a	; 10
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	98 87       	std	Y+8, r25	; 0x08
    26cc:	8f 83       	std	Y+7, r24	; 0x07
	CLEAR_BIT(SREG,7); //Disable I-bit at the beginning
    26ce:	af e5       	ldi	r26, 0x5F	; 95
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ef e5       	ldi	r30, 0x5F	; 95
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 77       	andi	r24, 0x7F	; 127
    26da:	8c 93       	st	X, r24

	uint16 timer_number,mode,scalar;
	mode = Config_Ptr->mode;
    26dc:	ef 81       	ldd	r30, Y+7	; 0x07
    26de:	f8 85       	ldd	r31, Y+8	; 0x08
    26e0:	81 81       	ldd	r24, Z+1	; 0x01
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
	timer_number = Config_Ptr->num;
    26ea:	ef 81       	ldd	r30, Y+7	; 0x07
    26ec:	f8 85       	ldd	r31, Y+8	; 0x08
    26ee:	80 81       	ld	r24, Z
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05

	/*prescalars in the enum is for timer2
	 * so we'll customize them for timer0 and timer1
	 * for timer0 and timer1 we'll use scalar
	 * but for timer2 we'll use Config_Ptr->scalar */
	scalar = Config_Ptr->scalar;
    26f8:	ef 81       	ldd	r30, Y+7	; 0x07
    26fa:	f8 85       	ldd	r31, Y+8	; 0x08
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	89 83       	std	Y+1, r24	; 0x01
	switch(scalar)
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	9a 87       	std	Y+10, r25	; 0x0a
    270c:	89 87       	std	Y+9, r24	; 0x09
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	86 30       	cpi	r24, 0x06	; 6
    2714:	91 05       	cpc	r25, r1
    2716:	79 f0       	breq	.+30     	; 0x2736 <Timer_init+0x80>
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	87 30       	cpi	r24, 0x07	; 7
    271e:	91 05       	cpc	r25, r1
    2720:	79 f0       	breq	.+30     	; 0x2740 <Timer_init+0x8a>
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	91 05       	cpc	r25, r1
    272a:	71 f4       	brne	.+28     	; 0x2748 <Timer_init+0x92>
	{
	case 4: //if it's 4 (clk/64) then it's 3 in Timers 0 & 1
		scalar =3;
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	09 c0       	rjmp	.+18     	; 0x2748 <Timer_init+0x92>
		break;
	case 6: //if it's 6 (clk/256) then it's 4 in Timers 0 & 1
		scalar =4;
    2736:	84 e0       	ldi	r24, 0x04	; 4
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <Timer_init+0x92>
		break;
	case 7: //if it's 7 (clk/1024) then it's 5 in Timers 0 & 1
		scalar =5;
    2740:	85 e0       	ldi	r24, 0x05	; 5
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if(timer_number == 0) //timer0
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	09 f0       	breq	.+2      	; 0x2752 <Timer_init+0x9c>
    2750:	40 c0       	rjmp	.+128    	; 0x27d2 <Timer_init+0x11c>
	{
		//we assume it's a normal mode at the beginning
		SET_BIT(TCCR0,FOC0);//Non_PWM mode
    2752:	a3 e5       	ldi	r26, 0x53	; 83
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e3 e5       	ldi	r30, 0x53	; 83
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	8c 93       	st	X, r24
		if(mode == 1)//compare
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	81 30       	cpi	r24, 0x01	; 1
    2766:	91 05       	cpc	r25, r1
    2768:	71 f4       	brne	.+28     	; 0x2786 <Timer_init+0xd0>
		{
			TCCR0 |= (1<<WGM01); // compare mode
    276a:	a3 e5       	ldi	r26, 0x53	; 83
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e3 e5       	ldi	r30, 0x53	; 83
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	88 60       	ori	r24, 0x08	; 8
    2776:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->s_comp; //get the compare value
    2778:	ac e5       	ldi	r26, 0x5C	; 92
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ef 81       	ldd	r30, Y+7	; 0x07
    277e:	f8 85       	ldd	r31, Y+8	; 0x08
    2780:	85 81       	ldd	r24, Z+5	; 0x05
    2782:	96 81       	ldd	r25, Z+6	; 0x06
    2784:	8c 93       	st	X, r24
		}
		TCCR0 = (TCCR0 & 0xF8) |scalar;// put the prescalar value in the first 3bits
    2786:	a3 e5       	ldi	r26, 0x53	; 83
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e3 e5       	ldi	r30, 0x53	; 83
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	98 2f       	mov	r25, r24
    2792:	98 7f       	andi	r25, 0xF8	; 248
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	89 2b       	or	r24, r25
    2798:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->s_initial;// the initial value
    279a:	a2 e5       	ldi	r26, 0x52	; 82
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	ef 81       	ldd	r30, Y+7	; 0x07
    27a0:	f8 85       	ldd	r31, Y+8	; 0x08
    27a2:	83 81       	ldd	r24, Z+3	; 0x03
    27a4:	94 81       	ldd	r25, Z+4	; 0x04
    27a6:	8c 93       	st	X, r24
		if(mode == 1) // compare
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	91 05       	cpc	r25, r1
    27b0:	41 f4       	brne	.+16     	; 0x27c2 <Timer_init+0x10c>
		{
			SET_BIT(TIMSK,OCIE0);//enable the output compare match interrupt
    27b2:	a9 e5       	ldi	r26, 0x59	; 89
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	e9 e5       	ldi	r30, 0x59	; 89
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	82 60       	ori	r24, 0x02	; 2
    27be:	8c 93       	st	X, r24
    27c0:	95 c0       	rjmp	.+298    	; 0x28ec <Timer_init+0x236>
		}
		else// overflow
		{
			SET_BIT(TIMSK,TOIE0);//enable the overflow interrupt
    27c2:	a9 e5       	ldi	r26, 0x59	; 89
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e9 e5       	ldi	r30, 0x59	; 89
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	81 60       	ori	r24, 0x01	; 1
    27ce:	8c 93       	st	X, r24
    27d0:	8d c0       	rjmp	.+282    	; 0x28ec <Timer_init+0x236>
		}
	}

	else if(timer_number == 1) // timer1
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	91 05       	cpc	r25, r1
    27da:	09 f0       	breq	.+2      	; 0x27de <Timer_init+0x128>
    27dc:	48 c0       	rjmp	.+144    	; 0x286e <Timer_init+0x1b8>
	{
		// Non_PWM mode
		SET_BIT(TCCR1A,FOC1A);
    27de:	af e4       	ldi	r26, 0x4F	; 79
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ef e4       	ldi	r30, 0x4F	; 79
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	88 60       	ori	r24, 0x08	; 8
    27ea:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    27ec:	af e4       	ldi	r26, 0x4F	; 79
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ef e4       	ldi	r30, 0x4F	; 79
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	84 60       	ori	r24, 0x04	; 4
    27f8:	8c 93       	st	X, r24
		if(mode == 1)//compare
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	91 05       	cpc	r25, r1
    2802:	69 f4       	brne	.+26     	; 0x281e <Timer_init+0x168>
		{
			TCCR1B = (1<<WGM12); // Compare mode
    2804:	ee e4       	ldi	r30, 0x4E	; 78
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	88 e0       	ldi	r24, 0x08	; 8
    280a:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->s_comp; //get the compare value
    280c:	aa e4       	ldi	r26, 0x4A	; 74
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	ef 81       	ldd	r30, Y+7	; 0x07
    2812:	f8 85       	ldd	r31, Y+8	; 0x08
    2814:	85 81       	ldd	r24, Z+5	; 0x05
    2816:	96 81       	ldd	r25, Z+6	; 0x06
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	9c 93       	st	X, r25
    281c:	8e 93       	st	-X, r24
		}
		TCCR1B = (TCCR1B & 0xF8) | scalar; // put the prescalar value in the first 3bits
    281e:	ae e4       	ldi	r26, 0x4E	; 78
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ee e4       	ldi	r30, 0x4E	; 78
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	98 2f       	mov	r25, r24
    282a:	98 7f       	andi	r25, 0xF8	; 248
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	89 2b       	or	r24, r25
    2830:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->s_initial; // the initial value
    2832:	ac e4       	ldi	r26, 0x4C	; 76
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ef 81       	ldd	r30, Y+7	; 0x07
    2838:	f8 85       	ldd	r31, Y+8	; 0x08
    283a:	83 81       	ldd	r24, Z+3	; 0x03
    283c:	94 81       	ldd	r25, Z+4	; 0x04
    283e:	11 96       	adiw	r26, 0x01	; 1
    2840:	9c 93       	st	X, r25
    2842:	8e 93       	st	-X, r24
		if(mode==1)//compare
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	91 05       	cpc	r25, r1
    284c:	41 f4       	brne	.+16     	; 0x285e <Timer_init+0x1a8>
		{
			SET_BIT(TIMSK,OCIE1A);//enable the output compare A match interrupt
    284e:	a9 e5       	ldi	r26, 0x59	; 89
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e9 e5       	ldi	r30, 0x59	; 89
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 61       	ori	r24, 0x10	; 16
    285a:	8c 93       	st	X, r24
    285c:	47 c0       	rjmp	.+142    	; 0x28ec <Timer_init+0x236>
		}

		else //overflow
		{
			SET_BIT(TIMSK,TOIE1);//enable the overflow interrupt
    285e:	a9 e5       	ldi	r26, 0x59	; 89
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e9 e5       	ldi	r30, 0x59	; 89
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	84 60       	ori	r24, 0x04	; 4
    286a:	8c 93       	st	X, r24
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <Timer_init+0x236>
		}

	}
	else //timer2
	{
		SET_BIT(TCCR2,FOC2);//Non_PWM mode
    286e:	a5 e4       	ldi	r26, 0x45	; 69
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e5 e4       	ldi	r30, 0x45	; 69
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	80 68       	ori	r24, 0x80	; 128
    287a:	8c 93       	st	X, r24
		if(mode==1)//compare
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	91 05       	cpc	r25, r1
    2884:	71 f4       	brne	.+28     	; 0x28a2 <Timer_init+0x1ec>
		{
			TCCR2 |= (1<<WGM21); //compare mode
    2886:	a5 e4       	ldi	r26, 0x45	; 69
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e5 e4       	ldi	r30, 0x45	; 69
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	88 60       	ori	r24, 0x08	; 8
    2892:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->s_comp; //get the compare value
    2894:	a3 e4       	ldi	r26, 0x43	; 67
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	ef 81       	ldd	r30, Y+7	; 0x07
    289a:	f8 85       	ldd	r31, Y+8	; 0x08
    289c:	85 81       	ldd	r24, Z+5	; 0x05
    289e:	96 81       	ldd	r25, Z+6	; 0x06
    28a0:	8c 93       	st	X, r24
		}
		TCCR2 = (TCCR2 & 0xF8) |scalar;// put the prescalar value in the first 3bits
    28a2:	a5 e4       	ldi	r26, 0x45	; 69
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e5 e4       	ldi	r30, 0x45	; 69
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	98 2f       	mov	r25, r24
    28ae:	98 7f       	andi	r25, 0xF8	; 248
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	89 2b       	or	r24, r25
    28b4:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->s_initial;// the initial value
    28b6:	a4 e4       	ldi	r26, 0x44	; 68
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ef 81       	ldd	r30, Y+7	; 0x07
    28bc:	f8 85       	ldd	r31, Y+8	; 0x08
    28be:	83 81       	ldd	r24, Z+3	; 0x03
    28c0:	94 81       	ldd	r25, Z+4	; 0x04
    28c2:	8c 93       	st	X, r24
		if(mode==1)//compare
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	91 05       	cpc	r25, r1
    28cc:	41 f4       	brne	.+16     	; 0x28de <Timer_init+0x228>
		{
			SET_BIT(TIMSK,OCIE2);//enable the output compare match interrupt
    28ce:	a9 e5       	ldi	r26, 0x59	; 89
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e9 e5       	ldi	r30, 0x59	; 89
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 68       	ori	r24, 0x80	; 128
    28da:	8c 93       	st	X, r24
    28dc:	07 c0       	rjmp	.+14     	; 0x28ec <Timer_init+0x236>
		}
		else //overflow
		{
			SET_BIT(TIMSK,TOIE2);//enable the overflow interrupt
    28de:	a9 e5       	ldi	r26, 0x59	; 89
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e9 e5       	ldi	r30, 0x59	; 89
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	8c 93       	st	X, r24
		}


	}

	SET_BIT(SREG,7); //enable I-bit
    28ec:	af e5       	ldi	r26, 0x5F	; 95
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ef e5       	ldi	r30, 0x5F	; 95
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	80 68       	ori	r24, 0x80	; 128
    28f8:	8c 93       	st	X, r24
}//end of init function
    28fa:	2a 96       	adiw	r28, 0x0a	; 10
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <Timer0_Overflow_CallBack>:

//Functions to set the Call Back function address

//for Timer0 at overflow mode
void Timer0_Overflow_CallBack(void(*a_t0_overflow_ptr)(void))
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <Timer0_Overflow_CallBack+0x6>
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_0_overflow_callBackPtr = a_t0_overflow_ptr;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	90 93 13 01 	sts	0x0113, r25
    2922:	80 93 12 01 	sts	0x0112, r24
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <Timer0_Compare_CallBack>:


//for Timer0 at compare mode
void Timer0_Compare_CallBack(void(*a_t0_compare_ptr)(void))
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <Timer0_Compare_CallBack+0x6>
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_0_compare_callBackPtr = a_t0_compare_ptr;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	90 93 15 01 	sts	0x0115, r25
    2946:	80 93 14 01 	sts	0x0114, r24
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <Timer1_Overflow_CallBack>:

//for Timer1 at overflow mode

void Timer1_Overflow_CallBack(void(*a_t1_overflow_ptr)(void))
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <Timer1_Overflow_CallBack+0x6>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_1_overflow_callBackPtr = a_t1_overflow_ptr;
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	90 93 17 01 	sts	0x0117, r25
    296a:	80 93 16 01 	sts	0x0116, r24
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <Timer1_Compare_CallBack>:

//for Timer1 at compare mode
void Timer1_Compare_CallBack(void(*a_t1_compare_ptr)(void))
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <Timer1_Compare_CallBack+0x6>
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_1_compare_callBackPtr = a_t1_compare_ptr;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	90 93 19 01 	sts	0x0119, r25
    298e:	80 93 18 01 	sts	0x0118, r24
}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <Timer2_Overflow_CallBack>:


//for Timer2 at overflow mode

void Timer2_Overflow_CallBack(void(*a_t2_overflow_ptr)(void))
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <Timer2_Overflow_CallBack+0x6>
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_2_overflow_callBackPtr = a_t2_overflow_ptr;
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	90 93 1b 01 	sts	0x011B, r25
    29b2:	80 93 1a 01 	sts	0x011A, r24
}
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <Timer2_Compare_CallBack>:


//for Timer0 at compare mode
void Timer2_Compare_CallBack(void(*a_t2_compare_ptr)(void))
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <Timer2_Compare_CallBack+0x6>
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
	// Save the address of the Call back function in a global variable
	g_t_2_compare_callBackPtr = a_t2_compare_ptr;
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	90 93 1d 01 	sts	0x011D, r25
    29d6:	80 93 1c 01 	sts	0x011C, r24
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <__mulsi3>:
    29e4:	62 9f       	mul	r22, r18
    29e6:	d0 01       	movw	r26, r0
    29e8:	73 9f       	mul	r23, r19
    29ea:	f0 01       	movw	r30, r0
    29ec:	82 9f       	mul	r24, r18
    29ee:	e0 0d       	add	r30, r0
    29f0:	f1 1d       	adc	r31, r1
    29f2:	64 9f       	mul	r22, r20
    29f4:	e0 0d       	add	r30, r0
    29f6:	f1 1d       	adc	r31, r1
    29f8:	92 9f       	mul	r25, r18
    29fa:	f0 0d       	add	r31, r0
    29fc:	83 9f       	mul	r24, r19
    29fe:	f0 0d       	add	r31, r0
    2a00:	74 9f       	mul	r23, r20
    2a02:	f0 0d       	add	r31, r0
    2a04:	65 9f       	mul	r22, r21
    2a06:	f0 0d       	add	r31, r0
    2a08:	99 27       	eor	r25, r25
    2a0a:	72 9f       	mul	r23, r18
    2a0c:	b0 0d       	add	r27, r0
    2a0e:	e1 1d       	adc	r30, r1
    2a10:	f9 1f       	adc	r31, r25
    2a12:	63 9f       	mul	r22, r19
    2a14:	b0 0d       	add	r27, r0
    2a16:	e1 1d       	adc	r30, r1
    2a18:	f9 1f       	adc	r31, r25
    2a1a:	bd 01       	movw	r22, r26
    2a1c:	cf 01       	movw	r24, r30
    2a1e:	11 24       	eor	r1, r1
    2a20:	08 95       	ret

00002a22 <__udivmodsi4>:
    2a22:	a1 e2       	ldi	r26, 0x21	; 33
    2a24:	1a 2e       	mov	r1, r26
    2a26:	aa 1b       	sub	r26, r26
    2a28:	bb 1b       	sub	r27, r27
    2a2a:	fd 01       	movw	r30, r26
    2a2c:	0d c0       	rjmp	.+26     	; 0x2a48 <__udivmodsi4_ep>

00002a2e <__udivmodsi4_loop>:
    2a2e:	aa 1f       	adc	r26, r26
    2a30:	bb 1f       	adc	r27, r27
    2a32:	ee 1f       	adc	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	a2 17       	cp	r26, r18
    2a38:	b3 07       	cpc	r27, r19
    2a3a:	e4 07       	cpc	r30, r20
    2a3c:	f5 07       	cpc	r31, r21
    2a3e:	20 f0       	brcs	.+8      	; 0x2a48 <__udivmodsi4_ep>
    2a40:	a2 1b       	sub	r26, r18
    2a42:	b3 0b       	sbc	r27, r19
    2a44:	e4 0b       	sbc	r30, r20
    2a46:	f5 0b       	sbc	r31, r21

00002a48 <__udivmodsi4_ep>:
    2a48:	66 1f       	adc	r22, r22
    2a4a:	77 1f       	adc	r23, r23
    2a4c:	88 1f       	adc	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	1a 94       	dec	r1
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <__udivmodsi4_loop>
    2a54:	60 95       	com	r22
    2a56:	70 95       	com	r23
    2a58:	80 95       	com	r24
    2a5a:	90 95       	com	r25
    2a5c:	9b 01       	movw	r18, r22
    2a5e:	ac 01       	movw	r20, r24
    2a60:	bd 01       	movw	r22, r26
    2a62:	cf 01       	movw	r24, r30
    2a64:	08 95       	ret

00002a66 <__divmodsi4>:
    2a66:	97 fb       	bst	r25, 7
    2a68:	09 2e       	mov	r0, r25
    2a6a:	05 26       	eor	r0, r21
    2a6c:	0e d0       	rcall	.+28     	; 0x2a8a <__divmodsi4_neg1>
    2a6e:	57 fd       	sbrc	r21, 7
    2a70:	04 d0       	rcall	.+8      	; 0x2a7a <__divmodsi4_neg2>
    2a72:	d7 df       	rcall	.-82     	; 0x2a22 <__udivmodsi4>
    2a74:	0a d0       	rcall	.+20     	; 0x2a8a <__divmodsi4_neg1>
    2a76:	00 1c       	adc	r0, r0
    2a78:	38 f4       	brcc	.+14     	; 0x2a88 <__divmodsi4_exit>

00002a7a <__divmodsi4_neg2>:
    2a7a:	50 95       	com	r21
    2a7c:	40 95       	com	r20
    2a7e:	30 95       	com	r19
    2a80:	21 95       	neg	r18
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
    2a84:	4f 4f       	sbci	r20, 0xFF	; 255
    2a86:	5f 4f       	sbci	r21, 0xFF	; 255

00002a88 <__divmodsi4_exit>:
    2a88:	08 95       	ret

00002a8a <__divmodsi4_neg1>:
    2a8a:	f6 f7       	brtc	.-4      	; 0x2a88 <__divmodsi4_exit>
    2a8c:	90 95       	com	r25
    2a8e:	80 95       	com	r24
    2a90:	70 95       	com	r23
    2a92:	61 95       	neg	r22
    2a94:	7f 4f       	sbci	r23, 0xFF	; 255
    2a96:	8f 4f       	sbci	r24, 0xFF	; 255
    2a98:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9a:	08 95       	ret

00002a9c <__prologue_saves__>:
    2a9c:	2f 92       	push	r2
    2a9e:	3f 92       	push	r3
    2aa0:	4f 92       	push	r4
    2aa2:	5f 92       	push	r5
    2aa4:	6f 92       	push	r6
    2aa6:	7f 92       	push	r7
    2aa8:	8f 92       	push	r8
    2aaa:	9f 92       	push	r9
    2aac:	af 92       	push	r10
    2aae:	bf 92       	push	r11
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	ca 1b       	sub	r28, r26
    2ac6:	db 0b       	sbc	r29, r27
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	09 94       	ijmp

00002ad4 <__epilogue_restores__>:
    2ad4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad6:	39 88       	ldd	r3, Y+17	; 0x11
    2ad8:	48 88       	ldd	r4, Y+16	; 0x10
    2ada:	5f 84       	ldd	r5, Y+15	; 0x0f
    2adc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ade:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ae8:	c8 84       	ldd	r12, Y+8	; 0x08
    2aea:	df 80       	ldd	r13, Y+7	; 0x07
    2aec:	ee 80       	ldd	r14, Y+6	; 0x06
    2aee:	fd 80       	ldd	r15, Y+5	; 0x05
    2af0:	0c 81       	ldd	r16, Y+4	; 0x04
    2af2:	1b 81       	ldd	r17, Y+3	; 0x03
    2af4:	aa 81       	ldd	r26, Y+2	; 0x02
    2af6:	b9 81       	ldd	r27, Y+1	; 0x01
    2af8:	ce 0f       	add	r28, r30
    2afa:	d1 1d       	adc	r29, r1
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	ed 01       	movw	r28, r26
    2b08:	08 95       	ret

00002b0a <itoa>:
    2b0a:	fb 01       	movw	r30, r22
    2b0c:	9f 01       	movw	r18, r30
    2b0e:	e8 94       	clt
    2b10:	42 30       	cpi	r20, 0x02	; 2
    2b12:	c4 f0       	brlt	.+48     	; 0x2b44 <itoa+0x3a>
    2b14:	45 32       	cpi	r20, 0x25	; 37
    2b16:	b4 f4       	brge	.+44     	; 0x2b44 <itoa+0x3a>
    2b18:	4a 30       	cpi	r20, 0x0A	; 10
    2b1a:	29 f4       	brne	.+10     	; 0x2b26 <itoa+0x1c>
    2b1c:	97 fb       	bst	r25, 7
    2b1e:	1e f4       	brtc	.+6      	; 0x2b26 <itoa+0x1c>
    2b20:	90 95       	com	r25
    2b22:	81 95       	neg	r24
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	64 2f       	mov	r22, r20
    2b28:	77 27       	eor	r23, r23
    2b2a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__udivmodhi4>
    2b2e:	80 5d       	subi	r24, 0xD0	; 208
    2b30:	8a 33       	cpi	r24, 0x3A	; 58
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <itoa+0x2c>
    2b34:	89 5d       	subi	r24, 0xD9	; 217
    2b36:	81 93       	st	Z+, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	a1 f7       	brne	.-24     	; 0x2b26 <itoa+0x1c>
    2b3e:	16 f4       	brtc	.+4      	; 0x2b44 <itoa+0x3a>
    2b40:	5d e2       	ldi	r21, 0x2D	; 45
    2b42:	51 93       	st	Z+, r21
    2b44:	10 82       	st	Z, r1
    2b46:	c9 01       	movw	r24, r18
    2b48:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <strrev>

00002b4c <strrev>:
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	fc 01       	movw	r30, r24
    2b50:	67 2f       	mov	r22, r23
    2b52:	71 91       	ld	r23, Z+
    2b54:	77 23       	and	r23, r23
    2b56:	e1 f7       	brne	.-8      	; 0x2b50 <strrev+0x4>
    2b58:	32 97       	sbiw	r30, 0x02	; 2
    2b5a:	04 c0       	rjmp	.+8      	; 0x2b64 <strrev+0x18>
    2b5c:	7c 91       	ld	r23, X
    2b5e:	6d 93       	st	X+, r22
    2b60:	70 83       	st	Z, r23
    2b62:	62 91       	ld	r22, -Z
    2b64:	ae 17       	cp	r26, r30
    2b66:	bf 07       	cpc	r27, r31
    2b68:	c8 f3       	brcs	.-14     	; 0x2b5c <strrev+0x10>
    2b6a:	08 95       	ret

00002b6c <__udivmodhi4>:
    2b6c:	aa 1b       	sub	r26, r26
    2b6e:	bb 1b       	sub	r27, r27
    2b70:	51 e1       	ldi	r21, 0x11	; 17
    2b72:	07 c0       	rjmp	.+14     	; 0x2b82 <__udivmodhi4_ep>

00002b74 <__udivmodhi4_loop>:
    2b74:	aa 1f       	adc	r26, r26
    2b76:	bb 1f       	adc	r27, r27
    2b78:	a6 17       	cp	r26, r22
    2b7a:	b7 07       	cpc	r27, r23
    2b7c:	10 f0       	brcs	.+4      	; 0x2b82 <__udivmodhi4_ep>
    2b7e:	a6 1b       	sub	r26, r22
    2b80:	b7 0b       	sbc	r27, r23

00002b82 <__udivmodhi4_ep>:
    2b82:	88 1f       	adc	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	5a 95       	dec	r21
    2b88:	a9 f7       	brne	.-22     	; 0x2b74 <__udivmodhi4_loop>
    2b8a:	80 95       	com	r24
    2b8c:	90 95       	com	r25
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	08 95       	ret

00002b94 <_exit>:
    2b94:	f8 94       	cli

00002b96 <__stop_program>:
    2b96:	ff cf       	rjmp	.-2      	; 0x2b96 <__stop_program>
